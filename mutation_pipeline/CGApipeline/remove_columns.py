import argparse


columns_to_remove = ['pon_total_counts_coverage_less_8',
					'pon_total_counts_coverage_greater_8',
					'pon_alt_count_greater1_af_greater_01percent',
					'pon_alt_count_greater2_af_greater_03percent',
					'pon_alt_count_greater3_af_greater_1percent',
					'pon_alt_count_greater3_af_greater_3percent',
					'pon_alt_count_greater3_af_greater_20percent',
					'pon_alt_count_greater10_af_greater_20percent',
					'pon_loglike',
					'pon_weight',
					'pon_pass_grid',
					'pon_pass_loglike',
					'pon_pass_weight',
					'pon_low_alt_count']


def remove_columns(IN_MAF, OUT_MAF, COLUMNS_TO_REMOVE):
	"""
		Reads maf line by line and removes columns from it
		Attributes:
		IN_MAF: maf file (must have header that starts with Hugo_Symbol)
		OUT_MAF: string name for the output file
		COLUMNS_TO_REMOVE: list of column names that will be removed
	"""
	with open(IN_MAF, 'r') as reader, open(OUT_MAF, 'w') as writer:
		for line in reader:
			if line.startswith('Hugo_Symbol'):
				header = line.strip('\n').split('\t')
				indexes = list()
				for c in COLUMNS_TO_REMOVE:
					if c in header:						
						indexes.append(header.index(c))
				filtered_header = [header[i] for i in xrange(len(header)) if not i in indexes]
				writer.write('\t'.join(filtered_header) + '\n')
			elif line.startswith('#'):
				writer.write(line)
			else:
				values = line.strip('\n').split('\t')
				if len(values) != len(header):
					print 'Error'
				else:
					filtered_values = [values[i] for i in xrange(len(values)) if not i in indexes]
					writer.write('\t'.join(filtered_values) + '\n')


def main():
	parser = argparse.ArgumentParser(description="Read MAF file and remove specified columns from it. By default removes columns generated by MAFPoN filter")
	parser.add_argument('--IN_MAF', help="input MAF File")
	parser.add_argument('--OUT_MAF', help="output MAF file")	
	parser.add_argument('--COLUMNS_TO_REMOVE', nargs='*', default=columns_to_remove, help="names of the columns that will be removed from MAF file")
	
	args = parser.parse_args()
	if(args):
		print 'Picked up   IN_MAF             : ' + str(args.IN_MAF)
		print 'Picked up   OUT_MAF            : ' + str(args.OUT_MAF)
		print 'Picked up   COLUMNS_TO_REMOVE  : ' + str(args.COLUMNS_TO_REMOVE)
		remove_columns(args.IN_MAF, args.OUT_MAF, args.COLUMNS_TO_REMOVE)	
	else:
		parser.print_help()


if __name__ == "__main__":
	main()