============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /home/jnoorbak/miniconda3/bin/python
cachedir: .pytest_cache
rootdir: /home/jnoorbak/projects/depmap_omics
plugins: anyio-3.0.1
collecting ... collected 108 items

depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_expression] FAILED [  0%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_nan_fractions[CCLE_fusions-allcells] PASSED [  1%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_nan_fractions[CCLE_fusions-sharedcells] PASSED [  2%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_expression-pd_dtypes] PASSED [  3%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_expression-map_type] PASSED [  4%]
depmapomics/qc/test_compare_to_ref_release.py::test_source_changes[CCLE_segment_cn] SKIPPED [  5%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_expression_proteincoding_genes_expected_count] FAILED [  6%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_nan_fractions[CCLE_fusions_unfiltered-allcells] PASSED [  7%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_nan_fractions[CCLE_fusions_unfiltered-sharedcells] PASSED [  8%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_expression_proteincoding_genes_expected_count-pd_dtypes] PASSED [  9%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_expression_proteincoding_genes_expected_count-map_type] PASSED [ 10%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_RNAseq_transcripts] FAILED [ 11%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_RNAseq_transcripts-pd_dtypes] PASSED [ 12%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_RNAseq_transcripts-map_type] PASSED [ 12%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_expression_transcripts_expected_count] FAILED [ 13%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_expression_transcripts_expected_count-pd_dtypes] PASSED [ 14%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_expression_transcripts_expected_count-map_type] PASSED [ 15%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_expression_full] FAILED [ 16%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_expression_full-pd_dtypes] PASSED [ 17%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_expression_full-map_type] PASSED [ 18%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_RNAseq_reads] FAILED [ 19%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_RNAseq_reads-pd_dtypes] PASSED [ 20%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_RNAseq_reads-map_type] PASSED [ 21%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_fusions] PASSED [ 22%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_fusions-pd_dtypes] PASSED [ 23%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_fusions-map_type] PASSED [ 24%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_fusions_unfiltered] PASSED [ 25%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_fusions_unfiltered-pd_dtypes] PASSED [ 25%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_dtypes[CCLE_fusions_unfiltered-map_type] PASSED [ 26%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression-0.99999-persample-spearman] FAILED [ 27%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression-0.99999-persample-pearson] SKIPPED [ 28%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression-0.99999-pergene-spearman] SKIPPED [ 29%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression-0.99999-pergene-pearson] SKIPPED [ 30%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_proteincoding_genes_expected_count-0.99999-persample-spearman] FAILED [ 31%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_proteincoding_genes_expected_count-0.99999-persample-pearson] SKIPPED [ 32%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_proteincoding_genes_expected_count-0.99999-pergene-spearman] SKIPPED [ 33%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_proteincoding_genes_expected_count-0.99999-pergene-pearson] SKIPPED [ 34%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_RNAseq_transcripts-0.99999-persample-spearman] FAILED [ 35%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_RNAseq_transcripts-0.99999-persample-pearson] SKIPPED [ 36%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_RNAseq_transcripts-0.99999-pergene-spearman] SKIPPED [ 37%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_RNAseq_transcripts-0.99999-pergene-pearson] SKIPPED [ 37%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_transcripts_expected_count-0.99999-persample-spearman] FAILED [ 38%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_transcripts_expected_count-0.99999-persample-pearson] SKIPPED [ 39%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_transcripts_expected_count-0.99999-pergene-spearman] SKIPPED [ 40%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_transcripts_expected_count-0.99999-pergene-pearson] SKIPPED [ 41%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_full-0.99999-persample-spearman] FAILED [ 42%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_full-0.99999-persample-pearson] SKIPPED [ 43%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_full-0.99999-pergene-spearman] SKIPPED [ 44%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_full-0.99999-pergene-pearson] SKIPPED [ 45%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_RNAseq_reads-0.99999-persample-spearman] FAILED [ 46%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_RNAseq_reads-0.99999-persample-pearson] SKIPPED [ 47%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_RNAseq_reads-0.99999-pergene-spearman] SKIPPED [ 48%]
depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_RNAseq_reads-0.99999-pergene-pearson] SKIPPED [ 49%]
depmapomics/qc/test_compare_to_ref_release.py::test_fraction_of_unequal_columns_from_merged_file[CCLE_fusions] FAILED [ 50%]
depmapomics/qc/test_compare_to_ref_release.py::test_fraction_of_unequal_columns_from_merged_file[CCLE_fusions_unfiltered] FAILED [ 50%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_cell_lines_released[CCLE_expression-index] SKIPPED [ 51%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_cell_lines_released[CCLE_expression_proteincoding_genes_expected_count-index] SKIPPED [ 52%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_cell_lines_released[CCLE_RNAseq_transcripts-index] SKIPPED [ 53%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_cell_lines_released[CCLE_expression_transcripts_expected_count-index] SKIPPED [ 54%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_cell_lines_released[CCLE_expression_full-index] SKIPPED [ 55%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_cell_lines_released[CCLE_RNAseq_reads-index] SKIPPED [ 56%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_cell_lines_released[CCLE_fusions-DepMap_ID] SKIPPED [ 57%]
depmapomics/qc/test_compare_to_ref_release.py::test_compare_cell_lines_released[CCLE_fusions_unfiltered-DepMap_ID] SKIPPED [ 58%]
depmapomics/qc/test_file_format.py::test_wrong_columns[CCLE_expression] PASSED [ 59%]
depmapomics/qc/test_file_format.py::test_symbol_and_entrezid_in_column[CCLE_expression] PASSED [ 60%]
depmapomics/qc/test_file_format.py::test_symbol_and_enstid_in_column[CCLE_RNAseq_transcripts] PASSED [ 61%]
depmapomics/qc/test_file_format.py::test_symbol_and_ensgid_in_column[CCLE_expression_full] PASSED [ 62%]
depmapomics/qc/test_file_format.py::test_arxspan_ids[CCLE_fusions] PASSED [ 62%]
depmapomics/qc/test_file_format.py::test_null_values[CCLE_expression] PASSED [ 63%]
depmapomics/qc/test_file_format.py::test_matrix_datatypes[CCLE_expression] PASSED [ 64%]
depmapomics/qc/test_file_format.py::test_expression_logtransform[CCLE_expression_full] PASSED [ 65%]
depmapomics/qc/test_file_format.py::test_chromosome_names[CCLE_segment_cn] PASSED [ 66%]
depmapomics/qc/test_file_format.py::test_wrong_columns[CCLE_expression_proteincoding_genes_expected_count] PASSED [ 67%]
depmapomics/qc/test_file_format.py::test_symbol_and_entrezid_in_column[CCLE_expression_proteincoding_genes_expected_count] PASSED [ 68%]
depmapomics/qc/test_file_format.py::test_symbol_and_enstid_in_column[CCLE_expression_transcripts_expected_count] PASSED [ 69%]
depmapomics/qc/test_file_format.py::test_symbol_and_ensgid_in_column[CCLE_RNAseq_reads] PASSED [ 70%]
depmapomics/qc/test_file_format.py::test_arxspan_ids[CCLE_fusions_unfiltered] PASSED [ 71%]
depmapomics/qc/test_file_format.py::test_null_values[CCLE_expression_proteincoding_genes_expected_count] PASSED [ 72%]
depmapomics/qc/test_file_format.py::test_matrix_datatypes[CCLE_expression_proteincoding_genes_expected_count] PASSED [ 73%]
depmapomics/qc/test_file_format.py::test_chromosome_names[CCLE_mutations] PASSED [ 74%]
depmapomics/qc/test_file_format.py::test_wrong_columns[CCLE_RNAseq_transcripts] PASSED [ 75%]
depmapomics/qc/test_file_format.py::test_null_values[CCLE_RNAseq_transcripts] PASSED [ 75%]
depmapomics/qc/test_file_format.py::test_matrix_datatypes[CCLE_RNAseq_transcripts] PASSED [ 76%]
depmapomics/qc/test_file_format.py::test_wrong_columns[CCLE_expression_transcripts_expected_count] PASSED [ 77%]
depmapomics/qc/test_file_format.py::test_null_values[CCLE_expression_transcripts_expected_count] PASSED [ 78%]
depmapomics/qc/test_file_format.py::test_matrix_datatypes[CCLE_expression_transcripts_expected_count] PASSED [ 79%]
depmapomics/qc/test_file_format.py::test_wrong_columns[CCLE_expression_full] PASSED [ 80%]
depmapomics/qc/test_file_format.py::test_null_values[CCLE_expression_full] PASSED [ 81%]
depmapomics/qc/test_file_format.py::test_matrix_datatypes[CCLE_expression_full] PASSED [ 82%]
depmapomics/qc/test_file_format.py::test_wrong_columns[CCLE_RNAseq_reads] PASSED [ 83%]
depmapomics/qc/test_file_format.py::test_null_values[CCLE_RNAseq_reads] PASSED [ 84%]
depmapomics/qc/test_file_format.py::test_matrix_datatypes[CCLE_RNAseq_reads] PASSED [ 85%]
depmapomics/qc/test_file_format.py::test_wrong_columns[CCLE_fusions] PASSED [ 86%]
depmapomics/qc/test_file_format.py::test_wrong_columns[CCLE_fusions_unfiltered] PASSED [ 87%]
depmapomics/qc/test_file_format.py::test_cnv_logtransform SKIPPED (n...) [ 87%]
depmapomics/qc/test_plot_comparisons.py::test_plot_gene_cn_comparison SKIPPED [ 88%]
depmapomics/qc/test_plot_comparisons.py::test_plot_per_gene_means[CCLE_expression-file_attr0] PASSED [ 89%]
depmapomics/qc/test_plot_comparisons.py::test_plot_per_gene_means[CCLE_expression_proteincoding_genes_expected_count-file_attr1] PASSED [ 90%]
depmapomics/qc/test_plot_comparisons.py::test_plot_per_gene_means[CCLE_RNAseq_transcripts-file_attr2] PASSED [ 91%]
depmapomics/qc/test_plot_comparisons.py::test_plot_per_gene_means[CCLE_expression_transcripts_expected_count-file_attr3] PASSED [ 92%]
depmapomics/qc/test_plot_comparisons.py::test_plot_per_gene_means[CCLE_expression_full-file_attr4] PASSED [ 93%]
depmapomics/qc/test_plot_comparisons.py::test_plot_per_gene_means[CCLE_RNAseq_reads-file_attr5] PASSED [ 94%]
depmapomics/qc/test_plot_comparisons.py::test_plot_matrix_comparison[CCLE_expression-CCLE_expression] PASSED [ 95%]
depmapomics/qc/test_plot_comparisons.py::test_plot_matrix_comparison[CCLE_expression_proteincoding_genes_expected_count-CCLE_expression_proteincoding_genes_expected_count] PASSED [ 96%]
depmapomics/qc/test_plot_comparisons.py::test_plot_matrix_comparison[CCLE_RNAseq_transcripts-CCLE_RNAseq_transcripts] PASSED [ 97%]
depmapomics/qc/test_plot_comparisons.py::test_plot_matrix_comparison[CCLE_expression_transcripts_expected_count-CCLE_expression_transcripts_expected_count] PASSED [ 98%]
depmapomics/qc/test_plot_comparisons.py::test_plot_matrix_comparison[CCLE_expression_full-CCLE_expression_full] PASSED [ 99%]
depmapomics/qc/test_plot_comparisons.py::test_plot_matrix_comparison[CCLE_RNAseq_reads-CCLE_RNAseq_reads] PASSED [100%]

=================================== FAILURES ===================================
__________________ test_compare_column_names[CCLE_expression] __________________

data = (            TSPAN6 (7105)  ...  AC113348.1 (102724657)
ACH-001113       4.990501  ...                0.000000
ACH-001...05292  ...                0.000000
ACH-000052       4.870858  ...                0.000000

[1511 rows x 19177 columns])

    @pytest.mark.parametrize('data', PARAMS_compare_column_names, indirect=['data'])
    @pytest.mark.compare
    def test_compare_column_names(data):
        data1, data2 = data
>       assert set(data1.columns) == set(data2.columns)
E       AssertionError: assert {'A1BG (1)', ...(53947)', ...} == {'A1BG (1)', ...(53947)', ...}
E         Extra items in the left set:
E         'ACBD6 (100527964)'
E         'RUNX1 (100506403)'
E         'GNMT (107080644)'
E         'WBP1L (102724307)'
E         'SPSB2 (105369632)'
E         'AQP7 (112267859)'...
E         
E         ...Full output truncated (19478 lines hidden), use '-vv' to show

depmapomics/qc/test_compare_to_ref_release.py:56: AssertionError
_ test_compare_column_names[CCLE_expression_proteincoding_genes_expected_count] _

data = (            TSPAN6 (7105)  ...  AC113348.1 (102724657)
ACH-001113         2383.0  ...                     0.0
ACH-001...694.0  ...                     0.0
ACH-000052         3188.0  ...                     0.0

[1511 rows x 19177 columns])

    @pytest.mark.parametrize('data', PARAMS_compare_column_names, indirect=['data'])
    @pytest.mark.compare
    def test_compare_column_names(data):
        data1, data2 = data
>       assert set(data1.columns) == set(data2.columns)
E       AssertionError: assert {'A1BG (1)', ...(53947)', ...} == {'A1BG (1)', ...(53947)', ...}
E         Extra items in the left set:
E         'ACBD6 (100527964)'
E         'RUNX1 (100506403)'
E         'GNMT (107080644)'
E         'WBP1L (102724307)'
E         'SPSB2 (105369632)'
E         'AQP7 (112267859)'...
E         
E         ...Full output truncated (19478 lines hidden), use '-vv' to show

depmapomics/qc/test_compare_to_ref_release.py:56: AssertionError
---------------------------- Captured stderr setup -----------------------------
[                      ]N/A% |   0.0 s/B |   0.0 B /  54.3 MiB | ETA:  --:--:--
[#                 ]  7% |  55.0 MiB/s |   4.0 MiB /  54.3 MiB | ETA:   0:00:00
[##                ] 12% |  49.2 MiB/s |   7.0 MiB /  54.3 MiB | ETA:   0:00:00
[###               ] 18% |  47.3 MiB/s |  10.0 MiB /  54.3 MiB | ETA:   0:00:00
[###               ] 22% |  45.1 MiB/s |  12.0 MiB /  54.3 MiB | ETA:   0:00:00
[####              ] 27% |  44.7 MiB/s |  15.0 MiB /  54.3 MiB | ETA:   0:00:00
[#####             ] 33% |  44.5 MiB/s |  18.0 MiB /  54.3 MiB | ETA:   0:00:00
[######            ] 38% |  44.4 MiB/s |  21.0 MiB /  54.3 MiB | ETA:   0:00:00
[#######           ] 44% |  44.3 MiB/s |  24.0 MiB /  54.3 MiB | ETA:   0:00:00
[########          ] 49% |  44.2 MiB/s |  27.0 MiB /  54.3 MiB | ETA:   0:00:00
[#########         ] 55% |  44.1 MiB/s |  30.0 MiB /  54.3 MiB | ETA:   0:00:00
[##########        ] 60% |  44.1 MiB/s |  33.0 MiB /  54.3 MiB | ETA:   0:00:00
[###########       ] 62% |  39.8 MiB/s |  34.0 MiB /  54.3 MiB | ETA:   0:00:00
[############      ] 68% |  40.1 MiB/s |  37.0 MiB /  54.3 MiB | ETA:   0:00:00
[#############     ] 73% |  40.3 MiB/s |  40.0 MiB /  54.3 MiB | ETA:   0:00:00
[##############    ] 79% |  40.5 MiB/s |  43.0 MiB /  54.3 MiB | ETA:   0:00:00
[###############   ] 84% |  40.7 MiB/s |  46.0 MiB /  54.3 MiB | ETA:   0:00:00
[###############   ] 88% |  38.0 MiB/s |  48.0 MiB /  54.3 MiB | ETA:   0:00:00
[################  ] 93% |  38.3 MiB/s |  51.0 MiB /  54.3 MiB | ETA:   0:00:00
[################# ] 99% |  38.6 MiB/s |  54.0 MiB /  54.3 MiB | ETA:   0:00:00
[##################]100% |  38.5 MiB/s |  54.3 MiB /  54.3 MiB | Time:  0:00:01
[                      ]N/A% |   0.0 s/B |   0.0 B /  57.6 MiB | ETA:  --:--:--
[                  ]  5% |  49.4 MiB/s |   3.0 MiB /  57.6 MiB | ETA:   0:00:01
[#                 ] 10% |  46.3 MiB/s |   6.0 MiB /  57.6 MiB | ETA:   0:00:01
[##                ] 15% |  45.2 MiB/s |   9.0 MiB /  57.6 MiB | ETA:   0:00:01
[###               ] 20% |  44.6 MiB/s |  12.0 MiB /  57.6 MiB | ETA:   0:00:01
[####              ] 26% |  44.3 MiB/s |  15.0 MiB /  57.6 MiB | ETA:   0:00:00
[#####             ] 31% |  44.1 MiB/s |  18.0 MiB /  57.6 MiB | ETA:   0:00:00
[######            ] 36% |  44.0 MiB/s |  21.0 MiB /  57.6 MiB | ETA:   0:00:00
[#######           ] 41% |  44.0 MiB/s |  24.0 MiB /  57.6 MiB | ETA:   0:00:00
[########          ] 46% |  43.8 MiB/s |  27.0 MiB /  57.6 MiB | ETA:   0:00:00
[#########         ] 52% |  43.7 MiB/s |  30.0 MiB /  57.6 MiB | ETA:   0:00:00
[##########        ] 57% |  43.7 MiB/s |  33.0 MiB /  57.6 MiB | ETA:   0:00:00
[###########       ] 62% |  43.7 MiB/s |  36.0 MiB /  57.6 MiB | ETA:   0:00:00
[############      ] 67% |  43.6 MiB/s |  39.0 MiB /  57.6 MiB | ETA:   0:00:00
[############      ] 69% |  40.8 MiB/s |  40.0 MiB /  57.6 MiB | ETA:   0:00:00
[#############     ] 74% |  41.0 MiB/s |  43.0 MiB /  57.6 MiB | ETA:   0:00:00
[##############    ] 79% |  41.1 MiB/s |  46.0 MiB /  57.6 MiB | ETA:   0:00:00
[###############   ] 85% |  41.3 MiB/s |  49.0 MiB /  57.6 MiB | ETA:   0:00:00
[################  ] 90% |  41.4 MiB/s |  52.0 MiB /  57.6 MiB | ETA:   0:00:00
[################# ] 95% |  41.5 MiB/s |  55.0 MiB /  57.6 MiB | ETA:   0:00:00
[##################]100% |  41.5 MiB/s |  57.6 MiB /  57.6 MiB | Time:  0:00:01
______________ test_compare_column_names[CCLE_RNAseq_transcripts] ______________

data = (            TSPAN6 (ENST00000373020)  ...  ERCC-00171
ACH-001113                  4.895787  ...    7.053872
ACH-00128...         5.751142  ...    8.399043
ACH-000052                  4.730640  ...    0.000000

[1511 rows x 198840 columns])

    @pytest.mark.parametrize('data', PARAMS_compare_column_names, indirect=['data'])
    @pytest.mark.compare
    def test_compare_column_names(data):
        data1, data2 = data
>       assert set(data1.columns) == set(data2.columns)
E       AssertionError: assert {'A1BG (ENST0...593374)', ...} == {'A1BG (ENST0...593374)', ...}
E         Extra items in the left set:
E         'LINC00856 (ENST00000459633)'
E         'CDY2A (ENST00000426790)'
E         'LINC00856 (ENST00000476909)'
E         'CDY2B (ENST00000544303)'
E         'LINC00856 (ENST00000415959)'
E         'LINC00856 (ENST00000432742)'...
E         
E         ...Full output truncated (198911 lines hidden), use '-vv' to show

depmapomics/qc/test_compare_to_ref_release.py:56: AssertionError
---------------------------- Captured stderr setup -----------------------------
[                      ]N/A% |   0.0 s/B |   0.0 B / 521.0 MiB | ETA:  --:--:--
[                  ]  0% |  37.7 MiB/s |   4.0 MiB / 521.0 MiB | ETA:   0:00:13
[                  ]  1% |  34.2 MiB/s |   7.0 MiB / 521.0 MiB | ETA:   0:00:15
[                  ]  2% |  33.0 MiB/s |  11.0 MiB / 521.0 MiB | ETA:   0:00:15
[                  ]  2% |  32.6 MiB/s |  14.0 MiB / 521.0 MiB | ETA:   0:00:15
[                  ]  3% |  32.3 MiB/s |  18.0 MiB / 521.0 MiB | ETA:   0:00:15
[                  ]  3% |  32.1 MiB/s |  20.0 MiB / 521.0 MiB | ETA:   0:00:15
[                  ]  4% |  31.9 MiB/s |  24.0 MiB / 521.0 MiB | ETA:   0:00:15
[                  ]  5% |  31.8 MiB/s |  27.0 MiB / 521.0 MiB | ETA:   0:00:15
[#                 ]  5% |  31.7 MiB/s |  31.0 MiB / 521.0 MiB | ETA:   0:00:15
[#                 ]  6% |  31.6 MiB/s |  33.0 MiB / 521.0 MiB | ETA:   0:00:15
[#                 ]  7% |  31.6 MiB/s |  37.0 MiB / 521.0 MiB | ETA:   0:00:15
[#                 ]  7% |  31.5 MiB/s |  40.0 MiB / 521.0 MiB | ETA:   0:00:15
[#                 ]  8% |  31.5 MiB/s |  44.0 MiB / 521.0 MiB | ETA:   0:00:15
[#                 ]  9% |  31.5 MiB/s |  47.0 MiB / 521.0 MiB | ETA:   0:00:15
[#                 ]  9% |  31.5 MiB/s |  51.0 MiB / 521.0 MiB | ETA:   0:00:14
[#                 ] 10% |  31.4 MiB/s |  53.0 MiB / 521.0 MiB | ETA:   0:00:14
[#                 ] 10% |  31.4 MiB/s |  57.0 MiB / 521.0 MiB | ETA:   0:00:14
[##                ] 11% |  31.4 MiB/s |  60.0 MiB / 521.0 MiB | ETA:   0:00:14
[##                ] 12% |  31.3 MiB/s |  64.0 MiB / 521.0 MiB | ETA:   0:00:14
[##                ] 12% |  31.2 MiB/s |  66.0 MiB / 521.0 MiB | ETA:   0:00:14
[##                ] 13% |  31.1 MiB/s |  70.0 MiB / 521.0 MiB | ETA:   0:00:14
[##                ] 14% |  31.1 MiB/s |  73.0 MiB / 521.0 MiB | ETA:   0:00:14
[##                ] 14% |  31.1 MiB/s |  77.0 MiB / 521.0 MiB | ETA:   0:00:14
[##                ] 15% |  31.1 MiB/s |  80.0 MiB / 521.0 MiB | ETA:   0:00:14
[##                ] 16% |  31.1 MiB/s |  84.0 MiB / 521.0 MiB | ETA:   0:00:14
[##                ] 16% |  31.1 MiB/s |  86.0 MiB / 521.0 MiB | ETA:   0:00:13
[###               ] 17% |  31.1 MiB/s |  90.0 MiB / 521.0 MiB | ETA:   0:00:13
[###               ] 17% |  31.1 MiB/s |  93.0 MiB / 521.0 MiB | ETA:   0:00:13
[###               ] 18% |  31.1 MiB/s |  97.0 MiB / 521.0 MiB | ETA:   0:00:13
[###               ] 19% |  31.1 MiB/s |  99.0 MiB / 521.0 MiB | ETA:   0:00:13
[###               ] 19% |  31.1 MiB/s | 103.0 MiB / 521.0 MiB | ETA:   0:00:13
[###               ] 20% |  31.1 MiB/s | 106.0 MiB / 521.0 MiB | ETA:   0:00:13
[###               ] 21% |  31.1 MiB/s | 110.0 MiB / 521.0 MiB | ETA:   0:00:13
[###               ] 21% |  31.1 MiB/s | 113.0 MiB / 521.0 MiB | ETA:   0:00:13
[####              ] 22% |  31.1 MiB/s | 117.0 MiB / 521.0 MiB | ETA:   0:00:12
[####              ] 22% |  31.1 MiB/s | 119.0 MiB / 521.0 MiB | ETA:   0:00:12
[####              ] 23% |  31.1 MiB/s | 123.0 MiB / 521.0 MiB | ETA:   0:00:12
[####              ] 24% |  31.1 MiB/s | 126.0 MiB / 521.0 MiB | ETA:   0:00:12
[####              ] 24% |  31.1 MiB/s | 130.0 MiB / 521.0 MiB | ETA:   0:00:12
[####              ] 25% |  31.2 MiB/s | 132.0 MiB / 521.0 MiB | ETA:   0:00:12
[####              ] 26% |  31.2 MiB/s | 136.0 MiB / 521.0 MiB | ETA:   0:00:12
[####              ] 26% |  31.2 MiB/s | 139.0 MiB / 521.0 MiB | ETA:   0:00:12
[####              ] 27% |  31.2 MiB/s | 143.0 MiB / 521.0 MiB | ETA:   0:00:12
[#####             ] 28% |  31.2 MiB/s | 146.0 MiB / 521.0 MiB | ETA:   0:00:12
[#####             ] 28% |  31.1 MiB/s | 150.0 MiB / 521.0 MiB | ETA:   0:00:11
[#####             ] 29% |  31.2 MiB/s | 152.0 MiB / 521.0 MiB | ETA:   0:00:11
[#####             ] 29% |  31.1 MiB/s | 156.0 MiB / 521.0 MiB | ETA:   0:00:11
[#####             ] 30% |  31.1 MiB/s | 159.0 MiB / 521.0 MiB | ETA:   0:00:11
[#####             ] 31% |  31.1 MiB/s | 162.0 MiB / 521.0 MiB | ETA:   0:00:11
[#####             ] 31% |  31.1 MiB/s | 165.0 MiB / 521.0 MiB | ETA:   0:00:11
[#####             ] 32% |  31.0 MiB/s | 168.0 MiB / 521.0 MiB | ETA:   0:00:11
[#####             ] 32% |  31.0 MiB/s | 171.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 33% |  31.0 MiB/s | 174.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 33% |  31.0 MiB/s | 177.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 34% |  30.9 MiB/s | 179.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 34% |  30.9 MiB/s | 182.0 MiB / 521.0 MiB | ETA:   0:00:10
[######            ] 35% |  30.7 MiB/s | 184.0 MiB / 521.0 MiB | ETA:   0:00:10
[######            ] 35% |  30.4 MiB/s | 187.0 MiB / 521.0 MiB | ETA:   0:00:10
[######            ] 36% |  30.0 MiB/s | 189.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 36% |  29.8 MiB/s | 191.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 36% |  29.7 MiB/s | 192.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 37% |  29.4 MiB/s | 194.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 37% |  29.2 MiB/s | 197.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 38% |  29.1 MiB/s | 198.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 38% |  28.8 MiB/s | 200.0 MiB / 521.0 MiB | ETA:   0:00:11
[######            ] 38% |  28.6 MiB/s | 202.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 39% |  28.4 MiB/s | 204.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 39% |  28.3 MiB/s | 205.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 39% |  28.1 MiB/s | 207.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 40% |  27.9 MiB/s | 209.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 40% |  27.9 MiB/s | 212.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 41% |  27.7 MiB/s | 214.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 41% |  27.5 MiB/s | 216.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 41% |  27.4 MiB/s | 218.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 42% |  27.2 MiB/s | 220.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 42% |  27.0 MiB/s | 223.0 MiB / 521.0 MiB | ETA:   0:00:11
[#######           ] 43% |  27.0 MiB/s | 225.0 MiB / 521.0 MiB | ETA:   0:00:10
[#######           ] 43% |  26.8 MiB/s | 227.0 MiB / 521.0 MiB | ETA:   0:00:10
[#######           ] 43% |  26.6 MiB/s | 229.0 MiB / 521.0 MiB | ETA:   0:00:10
[#######           ] 44% |  26.6 MiB/s | 231.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 44% |  26.4 MiB/s | 233.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 45% |  26.3 MiB/s | 236.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 45% |  26.2 MiB/s | 238.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 46% |  26.0 MiB/s | 240.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 46% |  25.9 MiB/s | 243.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 47% |  25.8 MiB/s | 245.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 47% |  25.7 MiB/s | 248.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 47% |  25.6 MiB/s | 250.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 48% |  25.6 MiB/s | 251.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 48% |  25.4 MiB/s | 253.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 48% |  25.3 MiB/s | 255.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 49% |  25.2 MiB/s | 257.0 MiB / 521.0 MiB | ETA:   0:00:10
[########          ] 49% |  25.1 MiB/s | 260.0 MiB / 521.0 MiB | ETA:   0:00:10
[#########         ] 50% |  25.0 MiB/s | 262.0 MiB / 521.0 MiB | ETA:   0:00:10
[#########         ] 50% |  24.9 MiB/s | 264.0 MiB / 521.0 MiB | ETA:   0:00:10
[#########         ] 51% |  24.8 MiB/s | 266.0 MiB / 521.0 MiB | ETA:   0:00:10
[#########         ] 51% |  24.6 MiB/s | 268.0 MiB / 521.0 MiB | ETA:   0:00:10
[#########         ] 52% |  24.7 MiB/s | 271.0 MiB / 521.0 MiB | ETA:   0:00:10
[#########         ] 52% |  24.6 MiB/s | 273.0 MiB / 521.0 MiB | ETA:   0:00:10
[#########         ] 52% |  24.5 MiB/s | 275.0 MiB / 521.0 MiB | ETA:   0:00:10
[#########         ] 53% |  24.5 MiB/s | 277.0 MiB / 521.0 MiB | ETA:   0:00:09
[#########         ] 53% |  24.4 MiB/s | 279.0 MiB / 521.0 MiB | ETA:   0:00:09
[#########         ] 53% |  24.3 MiB/s | 281.0 MiB / 521.0 MiB | ETA:   0:00:09
[#########         ] 54% |  24.2 MiB/s | 283.0 MiB / 521.0 MiB | ETA:   0:00:09
[#########         ] 54% |  24.1 MiB/s | 284.0 MiB / 521.0 MiB | ETA:   0:00:09
[#########         ] 54% |  24.0 MiB/s | 286.0 MiB / 521.0 MiB | ETA:   0:00:09
[#########         ] 55% |  24.0 MiB/s | 289.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 55% |  23.9 MiB/s | 291.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 56% |  23.9 MiB/s | 293.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 56% |  23.8 MiB/s | 295.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 57% |  23.7 MiB/s | 297.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 57% |  23.6 MiB/s | 299.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 57% |  23.5 MiB/s | 301.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 58% |  23.4 MiB/s | 303.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 58% |  23.4 MiB/s | 304.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 58% |  23.3 MiB/s | 306.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 59% |  23.3 MiB/s | 308.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 59% |  23.2 MiB/s | 310.0 MiB / 521.0 MiB | ETA:   0:00:09
[##########        ] 60% |  23.2 MiB/s | 313.0 MiB / 521.0 MiB | ETA:   0:00:08
[##########        ] 60% |  23.1 MiB/s | 316.0 MiB / 521.0 MiB | ETA:   0:00:08
[##########        ] 60% |  23.1 MiB/s | 317.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 61% |  23.0 MiB/s | 319.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 61% |  23.0 MiB/s | 322.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 62% |  23.0 MiB/s | 324.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 62% |  22.9 MiB/s | 326.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 62% |  22.9 MiB/s | 328.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 63% |  22.9 MiB/s | 330.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 63% |  22.9 MiB/s | 332.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 64% |  22.8 MiB/s | 335.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 64% |  22.7 MiB/s | 337.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 65% |  22.7 MiB/s | 339.0 MiB / 521.0 MiB | ETA:   0:00:08
[###########       ] 65% |  22.6 MiB/s | 342.0 MiB / 521.0 MiB | ETA:   0:00:07
[###########       ] 65% |  22.6 MiB/s | 343.0 MiB / 521.0 MiB | ETA:   0:00:07
[###########       ] 66% |  22.6 MiB/s | 346.0 MiB / 521.0 MiB | ETA:   0:00:07
[############      ] 66% |  22.6 MiB/s | 348.0 MiB / 521.0 MiB | ETA:   0:00:07
[############      ] 67% |  22.6 MiB/s | 350.0 MiB / 521.0 MiB | ETA:   0:00:07
[############      ] 67% |  22.5 MiB/s | 352.0 MiB / 521.0 MiB | ETA:   0:00:07
[############      ] 68% |  22.5 MiB/s | 355.0 MiB / 521.0 MiB | ETA:   0:00:07
[############      ] 68% |  22.5 MiB/s | 357.0 MiB / 521.0 MiB | ETA:   0:00:07
[############      ] 69% |  22.5 MiB/s | 360.0 MiB / 521.0 MiB | ETA:   0:00:07
[############      ] 69% |  22.5 MiB/s | 363.0 MiB / 521.0 MiB | ETA:   0:00:07
[############      ] 70% |  22.4 MiB/s | 366.0 MiB / 521.0 MiB | ETA:   0:00:06
[############      ] 70% |  22.5 MiB/s | 369.0 MiB / 521.0 MiB | ETA:   0:00:06
[############      ] 71% |  22.5 MiB/s | 372.0 MiB / 521.0 MiB | ETA:   0:00:06
[############      ] 71% |  22.4 MiB/s | 374.0 MiB / 521.0 MiB | ETA:   0:00:06
[############      ] 72% |  22.4 MiB/s | 376.0 MiB / 521.0 MiB | ETA:   0:00:06
[#############     ] 72% |  22.4 MiB/s | 378.0 MiB / 521.0 MiB | ETA:   0:00:06
[#############     ] 72% |  22.3 MiB/s | 380.0 MiB / 521.0 MiB | ETA:   0:00:06
[#############     ] 73% |  22.3 MiB/s | 383.0 MiB / 521.0 MiB | ETA:   0:00:06
[#############     ] 73% |  22.3 MiB/s | 385.0 MiB / 521.0 MiB | ETA:   0:00:06
[#############     ] 74% |  22.2 MiB/s | 388.0 MiB / 521.0 MiB | ETA:   0:00:05
[#############     ] 74% |  22.2 MiB/s | 390.0 MiB / 521.0 MiB | ETA:   0:00:05
[#############     ] 75% |  22.2 MiB/s | 392.0 MiB / 521.0 MiB | ETA:   0:00:05
[#############     ] 75% |  22.1 MiB/s | 395.0 MiB / 521.0 MiB | ETA:   0:00:05
[#############     ] 76% |  22.1 MiB/s | 396.0 MiB / 521.0 MiB | ETA:   0:00:05
[#############     ] 76% |  22.1 MiB/s | 398.0 MiB / 521.0 MiB | ETA:   0:00:05
[#############     ] 76% |  22.1 MiB/s | 401.0 MiB / 521.0 MiB | ETA:   0:00:05
[#############     ] 77% |  22.0 MiB/s | 403.0 MiB / 521.0 MiB | ETA:   0:00:05
[##############    ] 77% |  22.0 MiB/s | 406.0 MiB / 521.0 MiB | ETA:   0:00:05
[##############    ] 78% |  22.0 MiB/s | 408.0 MiB / 521.0 MiB | ETA:   0:00:05
[##############    ] 78% |  22.0 MiB/s | 409.0 MiB / 521.0 MiB | ETA:   0:00:05
[##############    ] 79% |  22.0 MiB/s | 412.0 MiB / 521.0 MiB | ETA:   0:00:04
[##############    ] 79% |  21.9 MiB/s | 414.0 MiB / 521.0 MiB | ETA:   0:00:04
[##############    ] 79% |  21.9 MiB/s | 416.0 MiB / 521.0 MiB | ETA:   0:00:04
[##############    ] 80% |  22.0 MiB/s | 419.0 MiB / 521.0 MiB | ETA:   0:00:04
[##############    ] 81% |  22.0 MiB/s | 423.0 MiB / 521.0 MiB | ETA:   0:00:04
[##############    ] 81% |  21.9 MiB/s | 426.0 MiB / 521.0 MiB | ETA:   0:00:04
[##############    ] 82% |  21.9 MiB/s | 428.0 MiB / 521.0 MiB | ETA:   0:00:04
[##############    ] 82% |  21.9 MiB/s | 431.0 MiB / 521.0 MiB | ETA:   0:00:04
[##############    ] 83% |  21.9 MiB/s | 433.0 MiB / 521.0 MiB | ETA:   0:00:04
[###############   ] 83% |  21.8 MiB/s | 435.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 83% |  21.8 MiB/s | 436.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 84% |  21.8 MiB/s | 439.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 84% |  21.8 MiB/s | 442.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 85% |  21.7 MiB/s | 444.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 85% |  21.7 MiB/s | 446.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 85% |  21.7 MiB/s | 448.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 86% |  21.6 MiB/s | 449.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 86% |  21.6 MiB/s | 451.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 86% |  21.6 MiB/s | 453.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 87% |  21.5 MiB/s | 455.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 87% |  21.5 MiB/s | 456.0 MiB / 521.0 MiB | ETA:   0:00:03
[###############   ] 87% |  21.5 MiB/s | 458.0 MiB / 521.0 MiB | ETA:   0:00:02
[###############   ] 88% |  21.4 MiB/s | 460.0 MiB / 521.0 MiB | ETA:   0:00:02
[###############   ] 88% |  21.4 MiB/s | 462.0 MiB / 521.0 MiB | ETA:   0:00:02
[################  ] 89% |  21.4 MiB/s | 464.0 MiB / 521.0 MiB | ETA:   0:00:02
[################  ] 89% |  21.3 MiB/s | 466.0 MiB / 521.0 MiB | ETA:   0:00:02
[################  ] 89% |  21.3 MiB/s | 468.0 MiB / 521.0 MiB | ETA:   0:00:02
[################  ] 90% |  21.3 MiB/s | 469.0 MiB / 521.0 MiB | ETA:   0:00:02
[################  ] 90% |  21.2 MiB/s | 471.0 MiB / 521.0 MiB | ETA:   0:00:02
[################  ] 90% |  21.2 MiB/s | 473.0 MiB / 521.0 MiB | ETA:   0:00:02
[################  ] 91% |  21.2 MiB/s | 475.0 MiB / 521.0 MiB | ETA:   0:00:02
[################  ] 91% |  21.1 MiB/s | 477.0 MiB / 521.0 MiB | ETA:   0:00:02
[################  ] 91% |  21.1 MiB/s | 479.0 MiB / 521.0 MiB | ETA:   0:00:01
[################  ] 92% |  21.1 MiB/s | 481.0 MiB / 521.0 MiB | ETA:   0:00:01
[################  ] 92% |  21.1 MiB/s | 482.0 MiB / 521.0 MiB | ETA:   0:00:01
[################  ] 92% |  21.0 MiB/s | 484.0 MiB / 521.0 MiB | ETA:   0:00:01
[################  ] 93% |  21.0 MiB/s | 486.0 MiB / 521.0 MiB | ETA:   0:00:01
[################  ] 93% |  21.0 MiB/s | 488.0 MiB / 521.0 MiB | ETA:   0:00:01
[################  ] 93% |  21.0 MiB/s | 489.0 MiB / 521.0 MiB | ETA:   0:00:01
[################  ] 94% |  20.9 MiB/s | 491.0 MiB / 521.0 MiB | ETA:   0:00:01
[################# ] 94% |  20.9 MiB/s | 493.0 MiB / 521.0 MiB | ETA:   0:00:01
[################# ] 95% |  20.9 MiB/s | 495.0 MiB / 521.0 MiB | ETA:   0:00:01
[################# ] 95% |  20.9 MiB/s | 497.0 MiB / 521.0 MiB | ETA:   0:00:01
[################# ] 95% |  20.8 MiB/s | 499.0 MiB / 521.0 MiB | ETA:   0:00:01
[################# ] 96% |  20.8 MiB/s | 501.0 MiB / 521.0 MiB | ETA:   0:00:00
[################# ] 96% |  20.8 MiB/s | 502.0 MiB / 521.0 MiB | ETA:   0:00:00
[################# ] 96% |  20.8 MiB/s | 504.0 MiB / 521.0 MiB | ETA:   0:00:00
[################# ] 97% |  20.7 MiB/s | 506.0 MiB / 521.0 MiB | ETA:   0:00:00
[################# ] 97% |  20.7 MiB/s | 508.0 MiB / 521.0 MiB | ETA:   0:00:00
[################# ] 97% |  20.7 MiB/s | 510.0 MiB / 521.0 MiB | ETA:   0:00:00
[################# ] 98% |  20.7 MiB/s | 512.0 MiB / 521.0 MiB | ETA:   0:00:00
[################# ] 98% |  20.6 MiB/s | 514.0 MiB / 521.0 MiB | ETA:   0:00:00
[################# ] 98% |  20.6 MiB/s | 515.0 MiB / 521.0 MiB | ETA:   0:00:00
[################# ] 99% |  20.6 MiB/s | 517.0 MiB / 521.0 MiB | ETA:   0:00:00
[################# ] 99% |  20.6 MiB/s | 519.0 MiB / 521.0 MiB | ETA:   0:00:00
[##################]100% |  20.5 MiB/s | 521.0 MiB / 521.0 MiB | Time:  0:00:25
[                      ]N/A% |   0.0 s/B |   0.0 B / 546.4 MiB | ETA:  --:--:--
[                  ]  0% |  39.4 MiB/s |   4.0 MiB / 546.4 MiB | ETA:   0:00:13
[                  ]  1% |  34.8 MiB/s |   7.0 MiB / 546.4 MiB | ETA:   0:00:15
[                  ]  2% |  33.3 MiB/s |  11.0 MiB / 546.4 MiB | ETA:   0:00:16
[                  ]  2% |  32.5 MiB/s |  14.0 MiB / 546.4 MiB | ETA:   0:00:16
[                  ]  3% |  32.0 MiB/s |  18.0 MiB / 546.4 MiB | ETA:   0:00:16
[                  ]  3% |  31.8 MiB/s |  21.0 MiB / 546.4 MiB | ETA:   0:00:16
[                  ]  4% |  31.0 MiB/s |  24.0 MiB / 546.4 MiB | ETA:   0:00:16
[                  ]  5% |  30.9 MiB/s |  28.0 MiB / 546.4 MiB | ETA:   0:00:16
[#                 ]  5% |  30.9 MiB/s |  32.0 MiB / 546.4 MiB | ETA:   0:00:16
[#                 ]  6% |  30.7 MiB/s |  35.0 MiB / 546.4 MiB | ETA:   0:00:16
[#                 ]  7% |  30.7 MiB/s |  39.0 MiB / 546.4 MiB | ETA:   0:00:16
[#                 ]  7% |  30.6 MiB/s |  42.0 MiB / 546.4 MiB | ETA:   0:00:16
[#                 ]  8% |  30.6 MiB/s |  46.0 MiB / 546.4 MiB | ETA:   0:00:16
[#                 ]  8% |  30.6 MiB/s |  49.0 MiB / 546.4 MiB | ETA:   0:00:16
[#                 ]  9% |  30.6 MiB/s |  53.0 MiB / 546.4 MiB | ETA:   0:00:16
[#                 ] 10% |  30.6 MiB/s |  56.0 MiB / 546.4 MiB | ETA:   0:00:16
[#                 ] 10% |  30.6 MiB/s |  60.0 MiB / 546.4 MiB | ETA:   0:00:15
[##                ] 11% |  30.6 MiB/s |  63.0 MiB / 546.4 MiB | ETA:   0:00:15
[##                ] 12% |  30.6 MiB/s |  67.0 MiB / 546.4 MiB | ETA:   0:00:15
[##                ] 12% |  30.6 MiB/s |  70.0 MiB / 546.4 MiB | ETA:   0:00:15
[##                ] 13% |  30.6 MiB/s |  74.0 MiB / 546.4 MiB | ETA:   0:00:15
[##                ] 14% |  30.6 MiB/s |  77.0 MiB / 546.4 MiB | ETA:   0:00:15
[##                ] 14% |  30.6 MiB/s |  80.0 MiB / 546.4 MiB | ETA:   0:00:15
[##                ] 15% |  30.6 MiB/s |  83.0 MiB / 546.4 MiB | ETA:   0:00:15
[##                ] 15% |  30.6 MiB/s |  87.0 MiB / 546.4 MiB | ETA:   0:00:15
[##                ] 16% |  30.5 MiB/s |  90.0 MiB / 546.4 MiB | ETA:   0:00:14
[###               ] 17% |  30.5 MiB/s |  94.0 MiB / 546.4 MiB | ETA:   0:00:14
[###               ] 17% |  30.5 MiB/s |  97.0 MiB / 546.4 MiB | ETA:   0:00:14
[###               ] 18% |  30.5 MiB/s | 101.0 MiB / 546.4 MiB | ETA:   0:00:14
[###               ] 19% |  30.5 MiB/s | 104.0 MiB / 546.4 MiB | ETA:   0:00:14
[###               ] 19% |  30.5 MiB/s | 108.0 MiB / 546.4 MiB | ETA:   0:00:14
[###               ] 20% |  30.5 MiB/s | 111.0 MiB / 546.4 MiB | ETA:   0:00:14
[###               ] 21% |  30.5 MiB/s | 115.0 MiB / 546.4 MiB | ETA:   0:00:14
[###               ] 21% |  30.5 MiB/s | 118.0 MiB / 546.4 MiB | ETA:   0:00:14
[####              ] 22% |  30.5 MiB/s | 122.0 MiB / 546.4 MiB | ETA:   0:00:13
[####              ] 22% |  30.5 MiB/s | 125.0 MiB / 546.4 MiB | ETA:   0:00:13
[####              ] 23% |  30.5 MiB/s | 129.0 MiB / 546.4 MiB | ETA:   0:00:13
[####              ] 24% |  30.6 MiB/s | 132.0 MiB / 546.4 MiB | ETA:   0:00:13
[####              ] 24% |  30.6 MiB/s | 136.0 MiB / 546.4 MiB | ETA:   0:00:13
[####              ] 25% |  30.6 MiB/s | 139.0 MiB / 546.4 MiB | ETA:   0:00:13
[####              ] 26% |  30.6 MiB/s | 143.0 MiB / 546.4 MiB | ETA:   0:00:13
[####              ] 26% |  30.6 MiB/s | 146.0 MiB / 546.4 MiB | ETA:   0:00:13
[####              ] 27% |  30.5 MiB/s | 149.0 MiB / 546.4 MiB | ETA:   0:00:13
[#####             ] 28% |  30.5 MiB/s | 153.0 MiB / 546.4 MiB | ETA:   0:00:12
[#####             ] 28% |  30.5 MiB/s | 157.0 MiB / 546.4 MiB | ETA:   0:00:12
[#####             ] 29% |  30.5 MiB/s | 160.0 MiB / 546.4 MiB | ETA:   0:00:12
[#####             ] 30% |  30.5 MiB/s | 164.0 MiB / 546.4 MiB | ETA:   0:00:12
[#####             ] 30% |  30.5 MiB/s | 166.0 MiB / 546.4 MiB | ETA:   0:00:12
[#####             ] 31% |  30.6 MiB/s | 170.0 MiB / 546.4 MiB | ETA:   0:00:12
[#####             ] 31% |  30.5 MiB/s | 173.0 MiB / 546.4 MiB | ETA:   0:00:12
[#####             ] 32% |  30.5 MiB/s | 176.0 MiB / 546.4 MiB | ETA:   0:00:12
[#####             ] 32% |  30.5 MiB/s | 180.0 MiB / 546.4 MiB | ETA:   0:00:11
[######            ] 33% |  30.6 MiB/s | 184.0 MiB / 546.4 MiB | ETA:   0:00:11
[######            ] 34% |  30.6 MiB/s | 187.0 MiB / 546.4 MiB | ETA:   0:00:11
[######            ] 34% |  30.5 MiB/s | 191.0 MiB / 546.4 MiB | ETA:   0:00:11
[######            ] 35% |  30.6 MiB/s | 194.0 MiB / 546.4 MiB | ETA:   0:00:11
[######            ] 36% |  30.6 MiB/s | 198.0 MiB / 546.4 MiB | ETA:   0:00:11
[######            ] 36% |  30.6 MiB/s | 201.0 MiB / 546.4 MiB | ETA:   0:00:11
[######            ] 37% |  30.6 MiB/s | 205.0 MiB / 546.4 MiB | ETA:   0:00:11
[######            ] 38% |  30.6 MiB/s | 208.0 MiB / 546.4 MiB | ETA:   0:00:11
[######            ] 38% |  30.5 MiB/s | 212.0 MiB / 546.4 MiB | ETA:   0:00:10
[#######           ] 39% |  30.5 MiB/s | 215.0 MiB / 546.4 MiB | ETA:   0:00:10
[#######           ] 40% |  30.5 MiB/s | 219.0 MiB / 546.4 MiB | ETA:   0:00:10
[#######           ] 40% |  30.5 MiB/s | 222.0 MiB / 546.4 MiB | ETA:   0:00:10
[#######           ] 41% |  30.5 MiB/s | 226.0 MiB / 546.4 MiB | ETA:   0:00:10
[#######           ] 41% |  30.5 MiB/s | 229.0 MiB / 546.4 MiB | ETA:   0:00:10
[#######           ] 42% |  30.5 MiB/s | 233.0 MiB / 546.4 MiB | ETA:   0:00:10
[#######           ] 43% |  30.5 MiB/s | 236.0 MiB / 546.4 MiB | ETA:   0:00:10
[#######           ] 43% |  30.5 MiB/s | 240.0 MiB / 546.4 MiB | ETA:   0:00:10
[########          ] 44% |  30.5 MiB/s | 243.0 MiB / 546.4 MiB | ETA:   0:00:09
[########          ] 45% |  30.5 MiB/s | 247.0 MiB / 546.4 MiB | ETA:   0:00:09
[########          ] 45% |  30.5 MiB/s | 249.0 MiB / 546.4 MiB | ETA:   0:00:09
[########          ] 46% |  30.5 MiB/s | 253.0 MiB / 546.4 MiB | ETA:   0:00:09
[########          ] 46% |  30.5 MiB/s | 256.0 MiB / 546.4 MiB | ETA:   0:00:09
[########          ] 47% |  30.5 MiB/s | 260.0 MiB / 546.4 MiB | ETA:   0:00:09
[########          ] 48% |  30.5 MiB/s | 263.0 MiB / 546.4 MiB | ETA:   0:00:09
[########          ] 48% |  30.5 MiB/s | 267.0 MiB / 546.4 MiB | ETA:   0:00:09
[########          ] 49% |  30.5 MiB/s | 270.0 MiB / 546.4 MiB | ETA:   0:00:09
[#########         ] 50% |  30.5 MiB/s | 274.0 MiB / 546.4 MiB | ETA:   0:00:08
[#########         ] 50% |  30.5 MiB/s | 277.0 MiB / 546.4 MiB | ETA:   0:00:08
[#########         ] 51% |  30.5 MiB/s | 281.0 MiB / 546.4 MiB | ETA:   0:00:08
[#########         ] 51% |  30.5 MiB/s | 284.0 MiB / 546.4 MiB | ETA:   0:00:08
[#########         ] 52% |  30.5 MiB/s | 288.0 MiB / 546.4 MiB | ETA:   0:00:08
[#########         ] 53% |  30.5 MiB/s | 291.0 MiB / 546.4 MiB | ETA:   0:00:08
[#########         ] 53% |  30.5 MiB/s | 295.0 MiB / 546.4 MiB | ETA:   0:00:08
[#########         ] 54% |  30.5 MiB/s | 298.0 MiB / 546.4 MiB | ETA:   0:00:08
[#########         ] 55% |  30.5 MiB/s | 302.0 MiB / 546.4 MiB | ETA:   0:00:08
[##########        ] 55% |  30.5 MiB/s | 305.0 MiB / 546.4 MiB | ETA:   0:00:07
[##########        ] 56% |  30.5 MiB/s | 309.0 MiB / 546.4 MiB | ETA:   0:00:07
[##########        ] 57% |  30.5 MiB/s | 312.0 MiB / 546.4 MiB | ETA:   0:00:07
[##########        ] 57% |  30.5 MiB/s | 316.0 MiB / 546.4 MiB | ETA:   0:00:07
[##########        ] 58% |  30.5 MiB/s | 319.0 MiB / 546.4 MiB | ETA:   0:00:07
[##########        ] 59% |  30.5 MiB/s | 323.0 MiB / 546.4 MiB | ETA:   0:00:07
[##########        ] 59% |  30.5 MiB/s | 326.0 MiB / 546.4 MiB | ETA:   0:00:07
[##########        ] 60% |  30.5 MiB/s | 330.0 MiB / 546.4 MiB | ETA:   0:00:07
[##########        ] 60% |  30.5 MiB/s | 332.0 MiB / 546.4 MiB | ETA:   0:00:07
[###########       ] 61% |  30.5 MiB/s | 336.0 MiB / 546.4 MiB | ETA:   0:00:06
[###########       ] 62% |  30.5 MiB/s | 339.0 MiB / 546.4 MiB | ETA:   0:00:06
[###########       ] 62% |  30.5 MiB/s | 343.0 MiB / 546.4 MiB | ETA:   0:00:06
[###########       ] 63% |  30.5 MiB/s | 346.0 MiB / 546.4 MiB | ETA:   0:00:06
[###########       ] 64% |  30.5 MiB/s | 350.0 MiB / 546.4 MiB | ETA:   0:00:06
[###########       ] 64% |  30.5 MiB/s | 353.0 MiB / 546.4 MiB | ETA:   0:00:06
[###########       ] 65% |  30.5 MiB/s | 357.0 MiB / 546.4 MiB | ETA:   0:00:06
[###########       ] 65% |  30.5 MiB/s | 360.0 MiB / 546.4 MiB | ETA:   0:00:06
[###########       ] 66% |  30.5 MiB/s | 364.0 MiB / 546.4 MiB | ETA:   0:00:05
[############      ] 67% |  30.5 MiB/s | 367.0 MiB / 546.4 MiB | ETA:   0:00:05
[############      ] 67% |  30.5 MiB/s | 371.0 MiB / 546.4 MiB | ETA:   0:00:05
[############      ] 68% |  30.5 MiB/s | 374.0 MiB / 546.4 MiB | ETA:   0:00:05
[############      ] 69% |  30.5 MiB/s | 378.0 MiB / 546.4 MiB | ETA:   0:00:05
[############      ] 69% |  30.5 MiB/s | 381.0 MiB / 546.4 MiB | ETA:   0:00:05
[############      ] 70% |  30.5 MiB/s | 385.0 MiB / 546.4 MiB | ETA:   0:00:05
[############      ] 71% |  30.5 MiB/s | 388.0 MiB / 546.4 MiB | ETA:   0:00:05
[############      ] 71% |  30.5 MiB/s | 392.0 MiB / 546.4 MiB | ETA:   0:00:05
[#############     ] 72% |  30.5 MiB/s | 395.0 MiB / 546.4 MiB | ETA:   0:00:04
[#############     ] 73% |  30.5 MiB/s | 399.0 MiB / 546.4 MiB | ETA:   0:00:04
[#############     ] 73% |  30.5 MiB/s | 402.0 MiB / 546.4 MiB | ETA:   0:00:04
[#############     ] 74% |  30.5 MiB/s | 405.0 MiB / 546.4 MiB | ETA:   0:00:04
[#############     ] 74% |  30.5 MiB/s | 409.0 MiB / 546.4 MiB | ETA:   0:00:04
[#############     ] 75% |  30.5 MiB/s | 413.0 MiB / 546.4 MiB | ETA:   0:00:04
[#############     ] 75% |  30.1 MiB/s | 414.0 MiB / 546.4 MiB | ETA:   0:00:04
[#############     ] 76% |  30.1 MiB/s | 417.0 MiB / 546.4 MiB | ETA:   0:00:04
[#############     ] 76% |  30.1 MiB/s | 420.0 MiB / 546.4 MiB | ETA:   0:00:04
[#############     ] 77% |  30.1 MiB/s | 422.0 MiB / 546.4 MiB | ETA:   0:00:04
[##############    ] 77% |  30.1 MiB/s | 425.0 MiB / 546.4 MiB | ETA:   0:00:04
[##############    ] 78% |  30.1 MiB/s | 428.0 MiB / 546.4 MiB | ETA:   0:00:03
[##############    ] 79% |  30.1 MiB/s | 432.0 MiB / 546.4 MiB | ETA:   0:00:03
[##############    ] 79% |  30.1 MiB/s | 436.0 MiB / 546.4 MiB | ETA:   0:00:03
[##############    ] 80% |  30.1 MiB/s | 440.0 MiB / 546.4 MiB | ETA:   0:00:03
[##############    ] 81% |  30.1 MiB/s | 443.0 MiB / 546.4 MiB | ETA:   0:00:03
[##############    ] 81% |  30.1 MiB/s | 447.0 MiB / 546.4 MiB | ETA:   0:00:03
[##############    ] 82% |  30.1 MiB/s | 450.0 MiB / 546.4 MiB | ETA:   0:00:03
[##############    ] 83% |  30.1 MiB/s | 454.0 MiB / 546.4 MiB | ETA:   0:00:03
[###############   ] 83% |  30.1 MiB/s | 457.0 MiB / 546.4 MiB | ETA:   0:00:02
[###############   ] 84% |  30.1 MiB/s | 461.0 MiB / 546.4 MiB | ETA:   0:00:02
[###############   ] 84% |  30.1 MiB/s | 464.0 MiB / 546.4 MiB | ETA:   0:00:02
[###############   ] 85% |  30.1 MiB/s | 468.0 MiB / 546.4 MiB | ETA:   0:00:02
[###############   ] 86% |  30.1 MiB/s | 471.0 MiB / 546.4 MiB | ETA:   0:00:02
[###############   ] 86% |  30.1 MiB/s | 475.0 MiB / 546.4 MiB | ETA:   0:00:02
[###############   ] 87% |  30.1 MiB/s | 478.0 MiB / 546.4 MiB | ETA:   0:00:02
[###############   ] 88% |  30.1 MiB/s | 482.0 MiB / 546.4 MiB | ETA:   0:00:02
[###############   ] 88% |  30.1 MiB/s | 485.0 MiB / 546.4 MiB | ETA:   0:00:02
[################  ] 89% |  30.1 MiB/s | 489.0 MiB / 546.4 MiB | ETA:   0:00:01
[################  ] 90% |  30.1 MiB/s | 492.0 MiB / 546.4 MiB | ETA:   0:00:01
[################  ] 90% |  30.1 MiB/s | 496.0 MiB / 546.4 MiB | ETA:   0:00:01
[################  ] 91% |  30.1 MiB/s | 498.0 MiB / 546.4 MiB | ETA:   0:00:01
[################  ] 91% |  30.1 MiB/s | 502.0 MiB / 546.4 MiB | ETA:   0:00:01
[################  ] 92% |  30.1 MiB/s | 505.0 MiB / 546.4 MiB | ETA:   0:00:01
[################  ] 93% |  30.1 MiB/s | 509.0 MiB / 546.4 MiB | ETA:   0:00:01
[################  ] 93% |  30.1 MiB/s | 512.0 MiB / 546.4 MiB | ETA:   0:00:01
[################  ] 94% |  30.1 MiB/s | 516.0 MiB / 546.4 MiB | ETA:   0:00:01
[################# ] 94% |  30.1 MiB/s | 519.0 MiB / 546.4 MiB | ETA:   0:00:00
[################# ] 95% |  30.1 MiB/s | 522.0 MiB / 546.4 MiB | ETA:   0:00:00
[################# ] 96% |  30.1 MiB/s | 525.0 MiB / 546.4 MiB | ETA:   0:00:00
[################# ] 96% |  30.1 MiB/s | 529.0 MiB / 546.4 MiB | ETA:   0:00:00
[################# ] 97% |  30.1 MiB/s | 532.0 MiB / 546.4 MiB | ETA:   0:00:00
[################# ] 98% |  30.1 MiB/s | 536.0 MiB / 546.4 MiB | ETA:   0:00:00
[################# ] 98% |  30.1 MiB/s | 540.0 MiB / 546.4 MiB | ETA:   0:00:00
[################# ] 99% |  30.1 MiB/s | 544.0 MiB / 546.4 MiB | ETA:   0:00:00
[##################]100% |  30.1 MiB/s | 546.4 MiB / 546.4 MiB | Time:  0:00:18
____ test_compare_column_names[CCLE_expression_transcripts_expected_count] _____

data = (            TSPAN6 (ENST00000373020)  ...  ERCC-00171
ACH-001113                    2272.9  ...      1059.0
ACH-00128...          40350.0  ...     27312.0
ACH-000052                    2956.3  ...         0.0

[1511 rows x 199272 columns])

    @pytest.mark.parametrize('data', PARAMS_compare_column_names, indirect=['data'])
    @pytest.mark.compare
    def test_compare_column_names(data):
        data1, data2 = data
>       assert set(data1.columns) == set(data2.columns)
E       AssertionError: assert {'A1BG (ENST0...593374)', ...} == {'A1BG (ENST0...593374)', ...}
E         Extra items in the left set:
E         'LINC00856 (ENST00000459633)'
E         'LINC00856 (ENST00000476909)'
E         'LINC00856 (ENST00000415959)'
E         'LINC00856 (ENST00000432742)'
E         'MTND6P16 (ENST00000504006)'
E         'LINC00856 (ENST00000634735)'...
E         
E         ...Full output truncated (199343 lines hidden), use '-vv' to show

depmapomics/qc/test_compare_to_ref_release.py:56: AssertionError
---------------------------- Captured stderr setup -----------------------------
[                      ]N/A% |   0.0 s/B |   0.0 B / 388.0 MiB | ETA:  --:--:--
[                  ]  1% |  50.2 MiB/s |   5.0 MiB / 388.0 MiB | ETA:   0:00:07
[                  ]  2% |  44.9 MiB/s |  10.0 MiB / 388.0 MiB | ETA:   0:00:08
[                  ]  3% |  43.4 MiB/s |  15.0 MiB / 388.0 MiB | ETA:   0:00:08
[                  ]  5% |  42.6 MiB/s |  20.0 MiB / 388.0 MiB | ETA:   0:00:08
[#                 ]  6% |  42.3 MiB/s |  25.0 MiB / 388.0 MiB | ETA:   0:00:08
[#                 ]  7% |  41.7 MiB/s |  29.0 MiB / 388.0 MiB | ETA:   0:00:08
[#                 ]  8% |  41.6 MiB/s |  34.0 MiB / 388.0 MiB | ETA:   0:00:08
[#                 ]  9% |  38.5 MiB/s |  35.0 MiB / 388.0 MiB | ETA:   0:00:09
[#                 ] 10% |  38.7 MiB/s |  40.0 MiB / 388.0 MiB | ETA:   0:00:09
[##                ] 11% |  38.8 MiB/s |  45.0 MiB / 388.0 MiB | ETA:   0:00:08
[##                ] 12% |  38.9 MiB/s |  49.0 MiB / 388.0 MiB | ETA:   0:00:08
[##                ] 13% |  39.1 MiB/s |  54.0 MiB / 388.0 MiB | ETA:   0:00:08
[##                ] 15% |  39.2 MiB/s |  59.0 MiB / 388.0 MiB | ETA:   0:00:08
[##                ] 16% |  39.2 MiB/s |  63.0 MiB / 388.0 MiB | ETA:   0:00:08
[###               ] 17% |  39.3 MiB/s |  68.0 MiB / 388.0 MiB | ETA:   0:00:08
[###               ] 18% |  39.4 MiB/s |  73.0 MiB / 388.0 MiB | ETA:   0:00:07
[###               ] 19% |  39.4 MiB/s |  77.0 MiB / 388.0 MiB | ETA:   0:00:07
[###               ] 20% |  39.2 MiB/s |  79.0 MiB / 388.0 MiB | ETA:   0:00:07
[###               ] 20% |  37.5 MiB/s |  80.0 MiB / 388.0 MiB | ETA:   0:00:08
[###               ] 21% |  37.6 MiB/s |  84.0 MiB / 388.0 MiB | ETA:   0:00:08
[####              ] 22% |  37.8 MiB/s |  89.0 MiB / 388.0 MiB | ETA:   0:00:07
[####              ] 24% |  38.0 MiB/s |  94.0 MiB / 388.0 MiB | ETA:   0:00:07
[####              ] 24% |  34.1 MiB/s |  95.0 MiB / 388.0 MiB | ETA:   0:00:08
[####              ] 24% |  33.0 MiB/s |  96.0 MiB / 388.0 MiB | ETA:   0:00:08
[####              ] 25% |  32.5 MiB/s |  98.0 MiB / 388.0 MiB | ETA:   0:00:08
[####              ] 26% |  32.9 MiB/s | 103.0 MiB / 388.0 MiB | ETA:   0:00:08
[####              ] 27% |  32.9 MiB/s | 107.0 MiB / 388.0 MiB | ETA:   0:00:08
[#####             ] 28% |  33.2 MiB/s | 112.0 MiB / 388.0 MiB | ETA:   0:00:08
[#####             ] 30% |  33.4 MiB/s | 117.0 MiB / 388.0 MiB | ETA:   0:00:08
[#####             ] 31% |  33.7 MiB/s | 122.0 MiB / 388.0 MiB | ETA:   0:00:07
[#####             ] 32% |  33.9 MiB/s | 126.0 MiB / 388.0 MiB | ETA:   0:00:07
[#####             ] 32% |  33.9 MiB/s | 128.0 MiB / 388.0 MiB | ETA:   0:00:07
[######            ] 34% |  34.1 MiB/s | 133.0 MiB / 388.0 MiB | ETA:   0:00:07
[######            ] 35% |  34.3 MiB/s | 138.0 MiB / 388.0 MiB | ETA:   0:00:07
[######            ] 36% |  34.5 MiB/s | 143.0 MiB / 388.0 MiB | ETA:   0:00:07
[######            ] 38% |  34.7 MiB/s | 148.0 MiB / 388.0 MiB | ETA:   0:00:06
[#######           ] 39% |  34.9 MiB/s | 153.0 MiB / 388.0 MiB | ETA:   0:00:06
[#######           ] 40% |  35.0 MiB/s | 158.0 MiB / 388.0 MiB | ETA:   0:00:06
[#######           ] 42% |  35.2 MiB/s | 163.0 MiB / 388.0 MiB | ETA:   0:00:06
[#######           ] 43% |  35.4 MiB/s | 168.0 MiB / 388.0 MiB | ETA:   0:00:06
[#######           ] 44% |  35.4 MiB/s | 172.0 MiB / 388.0 MiB | ETA:   0:00:06
[########          ] 45% |  35.5 MiB/s | 176.0 MiB / 388.0 MiB | ETA:   0:00:05
[########          ] 46% |  35.6 MiB/s | 181.0 MiB / 388.0 MiB | ETA:   0:00:05
[########          ] 47% |  35.7 MiB/s | 186.0 MiB / 388.0 MiB | ETA:   0:00:05
[########          ] 49% |  35.8 MiB/s | 191.0 MiB / 388.0 MiB | ETA:   0:00:05
[#########         ] 50% |  35.9 MiB/s | 196.0 MiB / 388.0 MiB | ETA:   0:00:05
[#########         ] 51% |  36.1 MiB/s | 201.0 MiB / 388.0 MiB | ETA:   0:00:05
[#########         ] 53% |  36.2 MiB/s | 206.0 MiB / 388.0 MiB | ETA:   0:00:05
[#########         ] 54% |  36.2 MiB/s | 211.0 MiB / 388.0 MiB | ETA:   0:00:04
[##########        ] 55% |  36.3 MiB/s | 216.0 MiB / 388.0 MiB | ETA:   0:00:04
[##########        ] 56% |  36.4 MiB/s | 221.0 MiB / 388.0 MiB | ETA:   0:00:04
[##########        ] 58% |  36.5 MiB/s | 226.0 MiB / 388.0 MiB | ETA:   0:00:04
[##########        ] 59% |  36.6 MiB/s | 231.0 MiB / 388.0 MiB | ETA:   0:00:04
[##########        ] 60% |  36.7 MiB/s | 236.0 MiB / 388.0 MiB | ETA:   0:00:04
[###########       ] 62% |  36.8 MiB/s | 241.0 MiB / 388.0 MiB | ETA:   0:00:04
[###########       ] 63% |  36.8 MiB/s | 246.0 MiB / 388.0 MiB | ETA:   0:00:03
[###########       ] 64% |  36.9 MiB/s | 251.0 MiB / 388.0 MiB | ETA:   0:00:03
[###########       ] 65% |  37.0 MiB/s | 256.0 MiB / 388.0 MiB | ETA:   0:00:03
[############      ] 67% |  37.0 MiB/s | 260.0 MiB / 388.0 MiB | ETA:   0:00:03
[############      ] 68% |  37.1 MiB/s | 265.0 MiB / 388.0 MiB | ETA:   0:00:03
[############      ] 69% |  37.1 MiB/s | 270.0 MiB / 388.0 MiB | ETA:   0:00:03
[############      ] 70% |  37.2 MiB/s | 275.0 MiB / 388.0 MiB | ETA:   0:00:03
[############      ] 72% |  37.2 MiB/s | 280.0 MiB / 388.0 MiB | ETA:   0:00:02
[#############     ] 73% |  37.3 MiB/s | 285.0 MiB / 388.0 MiB | ETA:   0:00:02
[#############     ] 74% |  37.4 MiB/s | 290.0 MiB / 388.0 MiB | ETA:   0:00:02
[#############     ] 76% |  37.4 MiB/s | 295.0 MiB / 388.0 MiB | ETA:   0:00:02
[#############     ] 77% |  37.5 MiB/s | 300.0 MiB / 388.0 MiB | ETA:   0:00:02
[##############    ] 78% |  37.5 MiB/s | 305.0 MiB / 388.0 MiB | ETA:   0:00:02
[##############    ] 79% |  37.6 MiB/s | 310.0 MiB / 388.0 MiB | ETA:   0:00:02
[##############    ] 81% |  37.6 MiB/s | 315.0 MiB / 388.0 MiB | ETA:   0:00:01
[##############    ] 82% |  37.7 MiB/s | 320.0 MiB / 388.0 MiB | ETA:   0:00:01
[###############   ] 83% |  37.7 MiB/s | 325.0 MiB / 388.0 MiB | ETA:   0:00:01
[###############   ] 85% |  37.7 MiB/s | 330.0 MiB / 388.0 MiB | ETA:   0:00:01
[###############   ] 86% |  37.8 MiB/s | 335.0 MiB / 388.0 MiB | ETA:   0:00:01
[###############   ] 87% |  37.8 MiB/s | 339.0 MiB / 388.0 MiB | ETA:   0:00:01
[###############   ] 88% |  37.8 MiB/s | 344.0 MiB / 388.0 MiB | ETA:   0:00:01
[################  ] 89% |  37.9 MiB/s | 349.0 MiB / 388.0 MiB | ETA:   0:00:01
[################  ] 91% |  37.9 MiB/s | 354.0 MiB / 388.0 MiB | ETA:   0:00:00
[################  ] 92% |  38.0 MiB/s | 359.0 MiB / 388.0 MiB | ETA:   0:00:00
[################  ] 93% |  38.0 MiB/s | 364.0 MiB / 388.0 MiB | ETA:   0:00:00
[################# ] 94% |  37.9 MiB/s | 368.0 MiB / 388.0 MiB | ETA:   0:00:00
[################# ] 95% |  38.0 MiB/s | 372.0 MiB / 388.0 MiB | ETA:   0:00:00
[################# ] 96% |  38.0 MiB/s | 374.0 MiB / 388.0 MiB | ETA:   0:00:00
[################# ] 97% |  38.0 MiB/s | 378.0 MiB / 388.0 MiB | ETA:   0:00:00
[################# ] 98% |  38.0 MiB/s | 383.0 MiB / 388.0 MiB | ETA:   0:00:00
[################# ] 99% |  38.0 MiB/s | 388.0 MiB / 388.0 MiB | ETA:   0:00:00
[##################]100% |  38.0 MiB/s | 388.0 MiB / 388.0 MiB | Time:  0:00:10
[                      ]N/A% |   0.0 s/B |   0.0 B / 410.2 MiB | ETA:  --:--:--
[                  ]  1% |  45.4 MiB/s |   5.0 MiB / 410.2 MiB | ETA:   0:00:08
[                  ]  2% |  42.6 MiB/s |   9.0 MiB / 410.2 MiB | ETA:   0:00:09
[                  ]  2% |  41.9 MiB/s |  11.0 MiB / 410.2 MiB | ETA:   0:00:09
[                  ]  3% |  40.5 MiB/s |  15.0 MiB / 410.2 MiB | ETA:   0:00:09
[                  ]  4% |  40.3 MiB/s |  19.0 MiB / 410.2 MiB | ETA:   0:00:09
[                  ]  5% |  40.2 MiB/s |  21.0 MiB / 410.2 MiB | ETA:   0:00:09
[#                 ]  6% |  40.2 MiB/s |  26.0 MiB / 410.2 MiB | ETA:   0:00:09
[#                 ]  7% |  40.2 MiB/s |  30.0 MiB / 410.2 MiB | ETA:   0:00:09
[#                 ]  7% |  40.1 MiB/s |  32.0 MiB / 410.2 MiB | ETA:   0:00:09
[#                 ]  9% |  40.2 MiB/s |  37.0 MiB / 410.2 MiB | ETA:   0:00:09
[#                 ] 10% |  40.1 MiB/s |  42.0 MiB / 410.2 MiB | ETA:   0:00:09
[##                ] 11% |  40.1 MiB/s |  46.0 MiB / 410.2 MiB | ETA:   0:00:09
[##                ] 12% |  40.1 MiB/s |  50.0 MiB / 410.2 MiB | ETA:   0:00:08
[##                ] 12% |  40.0 MiB/s |  52.0 MiB / 410.2 MiB | ETA:   0:00:08
[##                ] 13% |  39.9 MiB/s |  56.0 MiB / 410.2 MiB | ETA:   0:00:08
[##                ] 14% |  39.9 MiB/s |  58.0 MiB / 410.2 MiB | ETA:   0:00:08
[##                ] 15% |  39.9 MiB/s |  63.0 MiB / 410.2 MiB | ETA:   0:00:08
[##                ] 16% |  39.8 MiB/s |  67.0 MiB / 410.2 MiB | ETA:   0:00:08
[###               ] 17% |  39.8 MiB/s |  71.0 MiB / 410.2 MiB | ETA:   0:00:08
[###               ] 17% |  39.8 MiB/s |  73.0 MiB / 410.2 MiB | ETA:   0:00:08
[###               ] 18% |  39.8 MiB/s |  77.0 MiB / 410.2 MiB | ETA:   0:00:08
[###               ] 19% |  39.8 MiB/s |  82.0 MiB / 410.2 MiB | ETA:   0:00:08
[###               ] 20% |  39.8 MiB/s |  84.0 MiB / 410.2 MiB | ETA:   0:00:08
[###               ] 21% |  39.8 MiB/s |  88.0 MiB / 410.2 MiB | ETA:   0:00:08
[####              ] 22% |  39.8 MiB/s |  92.0 MiB / 410.2 MiB | ETA:   0:00:07
[####              ] 23% |  39.7 MiB/s |  96.0 MiB / 410.2 MiB | ETA:   0:00:07
[####              ] 24% |  39.7 MiB/s |  99.0 MiB / 410.2 MiB | ETA:   0:00:07
[####              ] 25% |  39.8 MiB/s | 104.0 MiB / 410.2 MiB | ETA:   0:00:07
[####              ] 26% |  39.8 MiB/s | 109.0 MiB / 410.2 MiB | ETA:   0:00:07
[#####             ] 27% |  39.9 MiB/s | 114.0 MiB / 410.2 MiB | ETA:   0:00:07
[#####             ] 28% |  39.9 MiB/s | 118.0 MiB / 410.2 MiB | ETA:   0:00:07
[#####             ] 29% |  39.9 MiB/s | 120.0 MiB / 410.2 MiB | ETA:   0:00:07
[#####             ] 30% |  39.9 MiB/s | 125.0 MiB / 410.2 MiB | ETA:   0:00:07
[#####             ] 31% |  39.9 MiB/s | 130.0 MiB / 410.2 MiB | ETA:   0:00:07
[#####             ] 32% |  39.9 MiB/s | 135.0 MiB / 410.2 MiB | ETA:   0:00:06
[######            ] 33% |  39.9 MiB/s | 139.0 MiB / 410.2 MiB | ETA:   0:00:06
[######            ] 34% |  39.9 MiB/s | 141.0 MiB / 410.2 MiB | ETA:   0:00:06
[######            ] 35% |  40.0 MiB/s | 146.0 MiB / 410.2 MiB | ETA:   0:00:06
[######            ] 36% |  40.0 MiB/s | 151.0 MiB / 410.2 MiB | ETA:   0:00:06
[######            ] 38% |  40.0 MiB/s | 156.0 MiB / 410.2 MiB | ETA:   0:00:06
[#######           ] 39% |  40.0 MiB/s | 161.0 MiB / 410.2 MiB | ETA:   0:00:06
[#######           ] 40% |  40.0 MiB/s | 166.0 MiB / 410.2 MiB | ETA:   0:00:06
[#######           ] 41% |  40.0 MiB/s | 171.0 MiB / 410.2 MiB | ETA:   0:00:05
[#######           ] 42% |  40.0 MiB/s | 176.0 MiB / 410.2 MiB | ETA:   0:00:05
[#######           ] 43% |  39.9 MiB/s | 180.0 MiB / 410.2 MiB | ETA:   0:00:05
[#######           ] 44% |  39.8 MiB/s | 182.0 MiB / 410.2 MiB | ETA:   0:00:05
[########          ] 45% |  39.8 MiB/s | 187.0 MiB / 410.2 MiB | ETA:   0:00:05
[########          ] 46% |  39.8 MiB/s | 192.0 MiB / 410.2 MiB | ETA:   0:00:05
[########          ] 47% |  39.8 MiB/s | 196.0 MiB / 410.2 MiB | ETA:   0:00:05
[########          ] 48% |  39.8 MiB/s | 198.0 MiB / 410.2 MiB | ETA:   0:00:05
[########          ] 49% |  39.9 MiB/s | 203.0 MiB / 410.2 MiB | ETA:   0:00:05
[#########         ] 50% |  39.9 MiB/s | 208.0 MiB / 410.2 MiB | ETA:   0:00:05
[#########         ] 51% |  39.9 MiB/s | 213.0 MiB / 410.2 MiB | ETA:   0:00:04
[#########         ] 53% |  39.9 MiB/s | 218.0 MiB / 410.2 MiB | ETA:   0:00:04
[#########         ] 54% |  39.9 MiB/s | 223.0 MiB / 410.2 MiB | ETA:   0:00:04
[##########        ] 55% |  39.9 MiB/s | 228.0 MiB / 410.2 MiB | ETA:   0:00:04
[##########        ] 56% |  39.9 MiB/s | 233.0 MiB / 410.2 MiB | ETA:   0:00:04
[##########        ] 58% |  40.0 MiB/s | 238.0 MiB / 410.2 MiB | ETA:   0:00:04
[##########        ] 59% |  40.0 MiB/s | 243.0 MiB / 410.2 MiB | ETA:   0:00:04
[##########        ] 60% |  40.0 MiB/s | 248.0 MiB / 410.2 MiB | ETA:   0:00:04
[###########       ] 61% |  40.0 MiB/s | 253.0 MiB / 410.2 MiB | ETA:   0:00:03
[###########       ] 62% |  40.0 MiB/s | 257.0 MiB / 410.2 MiB | ETA:   0:00:03
[###########       ] 63% |  40.0 MiB/s | 260.0 MiB / 410.2 MiB | ETA:   0:00:03
[###########       ] 64% |  40.0 MiB/s | 265.0 MiB / 410.2 MiB | ETA:   0:00:03
[###########       ] 65% |  39.6 MiB/s | 267.0 MiB / 410.2 MiB | ETA:   0:00:03
[###########       ] 66% |  39.6 MiB/s | 271.0 MiB / 410.2 MiB | ETA:   0:00:03
[############      ] 67% |  39.6 MiB/s | 275.0 MiB / 410.2 MiB | ETA:   0:00:03
[############      ] 68% |  39.6 MiB/s | 279.0 MiB / 410.2 MiB | ETA:   0:00:03
[############      ] 69% |  39.6 MiB/s | 284.0 MiB / 410.2 MiB | ETA:   0:00:03
[############      ] 70% |  39.0 MiB/s | 288.0 MiB / 410.2 MiB | ETA:   0:00:03
[############      ] 70% |  39.0 MiB/s | 291.0 MiB / 410.2 MiB | ETA:   0:00:03
[############      ] 72% |  39.0 MiB/s | 296.0 MiB / 410.2 MiB | ETA:   0:00:02
[#############     ] 73% |  39.1 MiB/s | 301.0 MiB / 410.2 MiB | ETA:   0:00:02
[#############     ] 74% |  39.1 MiB/s | 306.0 MiB / 410.2 MiB | ETA:   0:00:02
[#############     ] 75% |  39.1 MiB/s | 311.0 MiB / 410.2 MiB | ETA:   0:00:02
[#############     ] 77% |  39.1 MiB/s | 316.0 MiB / 410.2 MiB | ETA:   0:00:02
[##############    ] 78% |  39.1 MiB/s | 320.0 MiB / 410.2 MiB | ETA:   0:00:02
[##############    ] 78% |  39.1 MiB/s | 322.0 MiB / 410.2 MiB | ETA:   0:00:02
[##############    ] 79% |  39.1 MiB/s | 327.0 MiB / 410.2 MiB | ETA:   0:00:02
[##############    ] 80% |  39.1 MiB/s | 331.0 MiB / 410.2 MiB | ETA:   0:00:02
[##############    ] 81% |  39.1 MiB/s | 333.0 MiB / 410.2 MiB | ETA:   0:00:01
[##############    ] 82% |  39.2 MiB/s | 338.0 MiB / 410.2 MiB | ETA:   0:00:01
[###############   ] 83% |  39.2 MiB/s | 343.0 MiB / 410.2 MiB | ETA:   0:00:01
[###############   ] 84% |  39.2 MiB/s | 347.0 MiB / 410.2 MiB | ETA:   0:00:01
[###############   ] 85% |  39.2 MiB/s | 351.0 MiB / 410.2 MiB | ETA:   0:00:01
[###############   ] 86% |  39.2 MiB/s | 354.0 MiB / 410.2 MiB | ETA:   0:00:01
[###############   ] 87% |  39.2 MiB/s | 358.0 MiB / 410.2 MiB | ETA:   0:00:01
[###############   ] 88% |  39.2 MiB/s | 363.0 MiB / 410.2 MiB | ETA:   0:00:01
[################  ] 89% |  39.2 MiB/s | 368.0 MiB / 410.2 MiB | ETA:   0:00:01
[################  ] 90% |  39.2 MiB/s | 373.0 MiB / 410.2 MiB | ETA:   0:00:00
[################  ] 92% |  39.2 MiB/s | 378.0 MiB / 410.2 MiB | ETA:   0:00:00
[################  ] 93% |  39.3 MiB/s | 383.0 MiB / 410.2 MiB | ETA:   0:00:00
[################  ] 93% |  39.3 MiB/s | 385.0 MiB / 410.2 MiB | ETA:   0:00:00
[################# ] 94% |  39.3 MiB/s | 389.0 MiB / 410.2 MiB | ETA:   0:00:00
[################# ] 95% |  39.3 MiB/s | 393.0 MiB / 410.2 MiB | ETA:   0:00:00
[################# ] 96% |  39.3 MiB/s | 395.0 MiB / 410.2 MiB | ETA:   0:00:00
[################# ] 97% |  39.3 MiB/s | 399.0 MiB / 410.2 MiB | ETA:   0:00:00
[################# ] 98% |  39.3 MiB/s | 404.0 MiB / 410.2 MiB | ETA:   0:00:00
[################# ] 99% |  39.3 MiB/s | 409.0 MiB / 410.2 MiB | ETA:   0:00:00
[##################]100% |  39.3 MiB/s | 410.2 MiB / 410.2 MiB | Time:  0:00:10
_______________ test_compare_column_names[CCLE_expression_full] ________________

data = (            TSPAN6 (ENSG00000000003)  ...  ERCC-00171
ACH-001113                  4.990501  ...    7.053872
ACH-00128...          5.805292  ...    8.399043
ACH-000052                  4.870858  ...    0.000000

[1511 rows x 52054 columns])

    @pytest.mark.parametrize('data', PARAMS_compare_column_names, indirect=['data'])
    @pytest.mark.compare
    def test_compare_column_names(data):
        data1, data2 = data
>       assert set(data1.columns) == set(data2.columns)
E       AssertionError: assert {'A1BG (ENSG0...166535)', ...} == {'A1BG (ENSG0...166535)', ...}
E         Extra items in the left set:
E         'RN7SL691P (ENSG00000239464)'
E         'LINC00856 (ENSG00000230417)'
E         'MTND6P16 (ENSG00000249893)'
E         Extra items in the right set:
E         'LINC00595 (ENSG00000230417)'
E         'LINC01884 (ENSG00000233587)'...
E         
E         ...Full output truncated (52061 lines hidden), use '-vv' to show

depmapomics/qc/test_compare_to_ref_release.py:56: AssertionError
---------------------------- Captured stderr setup -----------------------------
[                      ]N/A% |   0.0 s/B |   0.0 B / 172.4 MiB | ETA:  --:--:--
[                  ]  1% |  47.9 MiB/s |   3.0 MiB / 172.4 MiB | ETA:   0:00:03
[                  ]  2% |  41.7 MiB/s |   5.0 MiB / 172.4 MiB | ETA:   0:00:04
[                  ]  4% |  39.4 MiB/s |   7.0 MiB / 172.4 MiB | ETA:   0:00:04
[                  ]  5% |  38.2 MiB/s |   9.0 MiB / 172.4 MiB | ETA:   0:00:04
[#                 ]  6% |  37.3 MiB/s |  11.0 MiB / 172.4 MiB | ETA:   0:00:04
[#                 ]  8% |  36.8 MiB/s |  14.0 MiB / 172.4 MiB | ETA:   0:00:04
[#                 ]  9% |  36.7 MiB/s |  16.0 MiB / 172.4 MiB | ETA:   0:00:04
[#                 ] 10% |  36.5 MiB/s |  18.0 MiB / 172.4 MiB | ETA:   0:00:04
[##                ] 11% |  36.4 MiB/s |  20.0 MiB / 172.4 MiB | ETA:   0:00:04
[##                ] 12% |  36.3 MiB/s |  22.0 MiB / 172.4 MiB | ETA:   0:00:04
[##                ] 13% |  36.2 MiB/s |  24.0 MiB / 172.4 MiB | ETA:   0:00:04
[##                ] 15% |  36.1 MiB/s |  27.0 MiB / 172.4 MiB | ETA:   0:00:04
[###               ] 16% |  36.1 MiB/s |  29.0 MiB / 172.4 MiB | ETA:   0:00:03
[###               ] 17% |  36.0 MiB/s |  31.0 MiB / 172.4 MiB | ETA:   0:00:03
[###               ] 19% |  36.0 MiB/s |  33.0 MiB / 172.4 MiB | ETA:   0:00:03
[###               ] 20% |  36.0 MiB/s |  35.0 MiB / 172.4 MiB | ETA:   0:00:03
[###               ] 22% |  35.9 MiB/s |  38.0 MiB / 172.4 MiB | ETA:   0:00:03
[####              ] 23% |  35.9 MiB/s |  40.0 MiB / 172.4 MiB | ETA:   0:00:03
[####              ] 24% |  36.0 MiB/s |  42.0 MiB / 172.4 MiB | ETA:   0:00:03
[####              ] 25% |  36.0 MiB/s |  44.0 MiB / 172.4 MiB | ETA:   0:00:03
[####              ] 26% |  35.9 MiB/s |  46.0 MiB / 172.4 MiB | ETA:   0:00:03
[#####             ] 27% |  35.8 MiB/s |  48.0 MiB / 172.4 MiB | ETA:   0:00:03
[#####             ] 29% |  35.8 MiB/s |  51.0 MiB / 172.4 MiB | ETA:   0:00:03
[#####             ] 30% |  35.8 MiB/s |  53.0 MiB / 172.4 MiB | ETA:   0:00:03
[#####             ] 31% |  35.7 MiB/s |  55.0 MiB / 172.4 MiB | ETA:   0:00:03
[#####             ] 33% |  35.7 MiB/s |  57.0 MiB / 172.4 MiB | ETA:   0:00:03
[######            ] 34% |  35.7 MiB/s |  59.0 MiB / 172.4 MiB | ETA:   0:00:03
[######            ] 35% |  35.7 MiB/s |  62.0 MiB / 172.4 MiB | ETA:   0:00:03
[######            ] 37% |  35.7 MiB/s |  64.0 MiB / 172.4 MiB | ETA:   0:00:03
[######            ] 38% |  35.7 MiB/s |  66.0 MiB / 172.4 MiB | ETA:   0:00:02
[#######           ] 39% |  35.7 MiB/s |  68.0 MiB / 172.4 MiB | ETA:   0:00:02
[#######           ] 40% |  35.7 MiB/s |  70.0 MiB / 172.4 MiB | ETA:   0:00:02
[#######           ] 41% |  35.7 MiB/s |  72.0 MiB / 172.4 MiB | ETA:   0:00:02
[#######           ] 43% |  35.7 MiB/s |  75.0 MiB / 172.4 MiB | ETA:   0:00:02
[########          ] 44% |  35.7 MiB/s |  77.0 MiB / 172.4 MiB | ETA:   0:00:02
[########          ] 45% |  35.7 MiB/s |  79.0 MiB / 172.4 MiB | ETA:   0:00:02
[########          ] 46% |  35.6 MiB/s |  81.0 MiB / 172.4 MiB | ETA:   0:00:02
[########          ] 48% |  35.6 MiB/s |  83.0 MiB / 172.4 MiB | ETA:   0:00:02
[########          ] 49% |  35.6 MiB/s |  86.0 MiB / 172.4 MiB | ETA:   0:00:02
[#########         ] 51% |  35.6 MiB/s |  88.0 MiB / 172.4 MiB | ETA:   0:00:02
[#########         ] 52% |  35.6 MiB/s |  90.0 MiB / 172.4 MiB | ETA:   0:00:02
[#########         ] 53% |  35.6 MiB/s |  92.0 MiB / 172.4 MiB | ETA:   0:00:02
[#########         ] 54% |  35.6 MiB/s |  94.0 MiB / 172.4 MiB | ETA:   0:00:02
[##########        ] 55% |  35.6 MiB/s |  96.0 MiB / 172.4 MiB | ETA:   0:00:02
[##########        ] 57% |  35.6 MiB/s |  99.0 MiB / 172.4 MiB | ETA:   0:00:02
[##########        ] 58% |  35.6 MiB/s | 101.0 MiB / 172.4 MiB | ETA:   0:00:02
[##########        ] 59% |  35.6 MiB/s | 103.0 MiB / 172.4 MiB | ETA:   0:00:01
[##########        ] 60% |  35.6 MiB/s | 105.0 MiB / 172.4 MiB | ETA:   0:00:01
[###########       ] 62% |  35.6 MiB/s | 107.0 MiB / 172.4 MiB | ETA:   0:00:01
[###########       ] 63% |  35.6 MiB/s | 110.0 MiB / 172.4 MiB | ETA:   0:00:01
[###########       ] 64% |  35.6 MiB/s | 112.0 MiB / 172.4 MiB | ETA:   0:00:01
[###########       ] 66% |  35.6 MiB/s | 114.0 MiB / 172.4 MiB | ETA:   0:00:01
[############      ] 67% |  35.6 MiB/s | 116.0 MiB / 172.4 MiB | ETA:   0:00:01
[############      ] 68% |  35.6 MiB/s | 118.0 MiB / 172.4 MiB | ETA:   0:00:01
[############      ] 69% |  35.5 MiB/s | 120.0 MiB / 172.4 MiB | ETA:   0:00:01
[############      ] 71% |  35.5 MiB/s | 123.0 MiB / 172.4 MiB | ETA:   0:00:01
[#############     ] 72% |  35.5 MiB/s | 125.0 MiB / 172.4 MiB | ETA:   0:00:01
[#############     ] 73% |  35.5 MiB/s | 127.0 MiB / 172.4 MiB | ETA:   0:00:01
[#############     ] 74% |  35.5 MiB/s | 129.0 MiB / 172.4 MiB | ETA:   0:00:01
[#############     ] 76% |  35.5 MiB/s | 131.0 MiB / 172.4 MiB | ETA:   0:00:01
[#############     ] 77% |  35.5 MiB/s | 134.0 MiB / 172.4 MiB | ETA:   0:00:01
[##############    ] 78% |  35.5 MiB/s | 136.0 MiB / 172.4 MiB | ETA:   0:00:01
[##############    ] 80% |  35.5 MiB/s | 138.0 MiB / 172.4 MiB | ETA:   0:00:00
[##############    ] 81% |  35.5 MiB/s | 140.0 MiB / 172.4 MiB | ETA:   0:00:00
[##############    ] 82% |  35.5 MiB/s | 142.0 MiB / 172.4 MiB | ETA:   0:00:00
[###############   ] 83% |  35.5 MiB/s | 144.0 MiB / 172.4 MiB | ETA:   0:00:00
[###############   ] 85% |  35.5 MiB/s | 147.0 MiB / 172.4 MiB | ETA:   0:00:00
[###############   ] 86% |  35.5 MiB/s | 149.0 MiB / 172.4 MiB | ETA:   0:00:00
[###############   ] 87% |  35.5 MiB/s | 151.0 MiB / 172.4 MiB | ETA:   0:00:00
[###############   ] 88% |  35.5 MiB/s | 153.0 MiB / 172.4 MiB | ETA:   0:00:00
[################  ] 89% |  35.5 MiB/s | 155.0 MiB / 172.4 MiB | ETA:   0:00:00
[################  ] 91% |  35.5 MiB/s | 158.0 MiB / 172.4 MiB | ETA:   0:00:00
[################  ] 92% |  35.5 MiB/s | 160.0 MiB / 172.4 MiB | ETA:   0:00:00
[################  ] 93% |  35.5 MiB/s | 162.0 MiB / 172.4 MiB | ETA:   0:00:00
[################# ] 95% |  35.5 MiB/s | 164.0 MiB / 172.4 MiB | ETA:   0:00:00
[################# ] 96% |  35.5 MiB/s | 166.0 MiB / 172.4 MiB | ETA:   0:00:00
[################# ] 97% |  35.5 MiB/s | 168.0 MiB / 172.4 MiB | ETA:   0:00:00
[################# ] 99% |  35.5 MiB/s | 171.0 MiB / 172.4 MiB | ETA:   0:00:00
[##################]100% |  35.5 MiB/s | 172.4 MiB / 172.4 MiB | Time:  0:00:04
[                      ]N/A% |   0.0 s/B |   0.0 B / 180.8 MiB | ETA:  --:--:--
[                  ]  1% |  47.2 MiB/s |   3.0 MiB / 180.8 MiB | ETA:   0:00:03
[                  ]  2% |  41.6 MiB/s |   5.0 MiB / 180.8 MiB | ETA:   0:00:04
[                  ]  3% |  39.8 MiB/s |   7.0 MiB / 180.8 MiB | ETA:   0:00:04
[                  ]  5% |  38.3 MiB/s |  10.0 MiB / 180.8 MiB | ETA:   0:00:04
[#                 ]  6% |  37.7 MiB/s |  12.0 MiB / 180.8 MiB | ETA:   0:00:04
[#                 ]  7% |  37.3 MiB/s |  14.0 MiB / 180.8 MiB | ETA:   0:00:04
[#                 ]  9% |  37.0 MiB/s |  17.0 MiB / 180.8 MiB | ETA:   0:00:04
[#                 ] 10% |  36.8 MiB/s |  19.0 MiB / 180.8 MiB | ETA:   0:00:04
[##                ] 11% |  36.7 MiB/s |  21.0 MiB / 180.8 MiB | ETA:   0:00:04
[##                ] 12% |  36.5 MiB/s |  23.0 MiB / 180.8 MiB | ETA:   0:00:04
[##                ] 14% |  36.3 MiB/s |  26.0 MiB / 180.8 MiB | ETA:   0:00:04
[##                ] 15% |  36.2 MiB/s |  28.0 MiB / 180.8 MiB | ETA:   0:00:04
[##                ] 16% |  36.1 MiB/s |  30.0 MiB / 180.8 MiB | ETA:   0:00:04
[###               ] 18% |  36.0 MiB/s |  33.0 MiB / 180.8 MiB | ETA:   0:00:04
[###               ] 19% |  35.9 MiB/s |  35.0 MiB / 180.8 MiB | ETA:   0:00:04
[###               ] 20% |  35.9 MiB/s |  37.0 MiB / 180.8 MiB | ETA:   0:00:04
[###               ] 21% |  35.9 MiB/s |  39.0 MiB / 180.8 MiB | ETA:   0:00:03
[####              ] 23% |  35.8 MiB/s |  42.0 MiB / 180.8 MiB | ETA:   0:00:03
[####              ] 24% |  35.8 MiB/s |  44.0 MiB / 180.8 MiB | ETA:   0:00:03
[####              ] 25% |  35.8 MiB/s |  46.0 MiB / 180.8 MiB | ETA:   0:00:03
[####              ] 27% |  35.8 MiB/s |  49.0 MiB / 180.8 MiB | ETA:   0:00:03
[#####             ] 28% |  35.8 MiB/s |  51.0 MiB / 180.8 MiB | ETA:   0:00:03
[#####             ] 29% |  35.8 MiB/s |  53.0 MiB / 180.8 MiB | ETA:   0:00:03
[#####             ] 30% |  35.8 MiB/s |  55.0 MiB / 180.8 MiB | ETA:   0:00:03
[#####             ] 32% |  35.7 MiB/s |  58.0 MiB / 180.8 MiB | ETA:   0:00:03
[#####             ] 33% |  35.7 MiB/s |  60.0 MiB / 180.8 MiB | ETA:   0:00:03
[######            ] 34% |  35.7 MiB/s |  62.0 MiB / 180.8 MiB | ETA:   0:00:03
[######            ] 35% |  35.7 MiB/s |  65.0 MiB / 180.8 MiB | ETA:   0:00:03
[######            ] 37% |  35.7 MiB/s |  67.0 MiB / 180.8 MiB | ETA:   0:00:03
[######            ] 38% |  35.6 MiB/s |  69.0 MiB / 180.8 MiB | ETA:   0:00:03
[#######           ] 39% |  35.6 MiB/s |  71.0 MiB / 180.8 MiB | ETA:   0:00:03
[#######           ] 40% |  35.6 MiB/s |  74.0 MiB / 180.8 MiB | ETA:   0:00:03
[#######           ] 42% |  35.6 MiB/s |  76.0 MiB / 180.8 MiB | ETA:   0:00:02
[#######           ] 43% |  35.6 MiB/s |  78.0 MiB / 180.8 MiB | ETA:   0:00:02
[########          ] 44% |  35.6 MiB/s |  81.0 MiB / 180.8 MiB | ETA:   0:00:02
[########          ] 45% |  35.6 MiB/s |  83.0 MiB / 180.8 MiB | ETA:   0:00:02
[########          ] 47% |  35.6 MiB/s |  85.0 MiB / 180.8 MiB | ETA:   0:00:02
[########          ] 48% |  35.6 MiB/s |  87.0 MiB / 180.8 MiB | ETA:   0:00:02
[########          ] 49% |  35.6 MiB/s |  90.0 MiB / 180.8 MiB | ETA:   0:00:02
[#########         ] 50% |  35.6 MiB/s |  92.0 MiB / 180.8 MiB | ETA:   0:00:02
[#########         ] 51% |  35.5 MiB/s |  94.0 MiB / 180.8 MiB | ETA:   0:00:02
[#########         ] 53% |  35.5 MiB/s |  97.0 MiB / 180.8 MiB | ETA:   0:00:02
[#########         ] 54% |  35.5 MiB/s |  99.0 MiB / 180.8 MiB | ETA:   0:00:02
[##########        ] 55% |  35.5 MiB/s | 101.0 MiB / 180.8 MiB | ETA:   0:00:02
[##########        ] 57% |  35.5 MiB/s | 104.0 MiB / 180.8 MiB | ETA:   0:00:02
[##########        ] 58% |  35.5 MiB/s | 106.0 MiB / 180.8 MiB | ETA:   0:00:02
[##########        ] 59% |  35.5 MiB/s | 108.0 MiB / 180.8 MiB | ETA:   0:00:02
[##########        ] 60% |  35.5 MiB/s | 110.0 MiB / 180.8 MiB | ETA:   0:00:01
[###########       ] 62% |  35.5 MiB/s | 113.0 MiB / 180.8 MiB | ETA:   0:00:01
[###########       ] 63% |  35.5 MiB/s | 115.0 MiB / 180.8 MiB | ETA:   0:00:01
[###########       ] 64% |  35.6 MiB/s | 117.0 MiB / 180.8 MiB | ETA:   0:00:01
[###########       ] 66% |  35.6 MiB/s | 120.0 MiB / 180.8 MiB | ETA:   0:00:01
[############      ] 67% |  35.6 MiB/s | 122.0 MiB / 180.8 MiB | ETA:   0:00:01
[############      ] 68% |  35.6 MiB/s | 124.0 MiB / 180.8 MiB | ETA:   0:00:01
[############      ] 69% |  35.6 MiB/s | 126.0 MiB / 180.8 MiB | ETA:   0:00:01
[############      ] 71% |  35.6 MiB/s | 129.0 MiB / 180.8 MiB | ETA:   0:00:01
[#############     ] 72% |  35.5 MiB/s | 131.0 MiB / 180.8 MiB | ETA:   0:00:01
[#############     ] 73% |  35.5 MiB/s | 133.0 MiB / 180.8 MiB | ETA:   0:00:01
[#############     ] 75% |  35.5 MiB/s | 136.0 MiB / 180.8 MiB | ETA:   0:00:01
[#############     ] 76% |  35.5 MiB/s | 138.0 MiB / 180.8 MiB | ETA:   0:00:01
[#############     ] 77% |  35.5 MiB/s | 140.0 MiB / 180.8 MiB | ETA:   0:00:01
[##############    ] 78% |  35.5 MiB/s | 142.0 MiB / 180.8 MiB | ETA:   0:00:01
[##############    ] 80% |  35.5 MiB/s | 145.0 MiB / 180.8 MiB | ETA:   0:00:01
[##############    ] 81% |  35.5 MiB/s | 147.0 MiB / 180.8 MiB | ETA:   0:00:00
[##############    ] 82% |  35.5 MiB/s | 149.0 MiB / 180.8 MiB | ETA:   0:00:00
[###############   ] 84% |  35.5 MiB/s | 152.0 MiB / 180.8 MiB | ETA:   0:00:00
[###############   ] 85% |  35.5 MiB/s | 154.0 MiB / 180.8 MiB | ETA:   0:00:00
[###############   ] 86% |  35.5 MiB/s | 156.0 MiB / 180.8 MiB | ETA:   0:00:00
[###############   ] 87% |  35.5 MiB/s | 158.0 MiB / 180.8 MiB | ETA:   0:00:00
[################  ] 89% |  35.5 MiB/s | 161.0 MiB / 180.8 MiB | ETA:   0:00:00
[################  ] 90% |  35.5 MiB/s | 163.0 MiB / 180.8 MiB | ETA:   0:00:00
[################  ] 91% |  35.5 MiB/s | 165.0 MiB / 180.8 MiB | ETA:   0:00:00
[################  ] 92% |  35.5 MiB/s | 168.0 MiB / 180.8 MiB | ETA:   0:00:00
[################  ] 94% |  35.5 MiB/s | 170.0 MiB / 180.8 MiB | ETA:   0:00:00
[################# ] 95% |  35.5 MiB/s | 172.0 MiB / 180.8 MiB | ETA:   0:00:00
[################# ] 96% |  35.5 MiB/s | 174.0 MiB / 180.8 MiB | ETA:   0:00:00
[################# ] 97% |  35.5 MiB/s | 177.0 MiB / 180.8 MiB | ETA:   0:00:00
[################# ] 98% |  35.5 MiB/s | 179.0 MiB / 180.8 MiB | ETA:   0:00:00
[##################]100% |  35.5 MiB/s | 180.8 MiB / 180.8 MiB | Time:  0:00:05
_________________ test_compare_column_names[CCLE_RNAseq_reads] _________________

data = (            TSPAN6 (ENSG00000000003)  ...  ERCC-00171
ACH-001113                    2383.0  ...      1059.0
ACH-00128...           41694.0  ...     27312.0
ACH-000052                    3188.0  ...         0.0

[1511 rows x 52439 columns])

    @pytest.mark.parametrize('data', PARAMS_compare_column_names, indirect=['data'])
    @pytest.mark.compare
    def test_compare_column_names(data):
        data1, data2 = data
>       assert set(data1.columns) == set(data2.columns)
E       AssertionError: assert {'A1BG (ENSG0...166535)', ...} == {'A1BG (ENSG0...166535)', ...}
E         Extra items in the left set:
E         'CDY17P (ENSG00000231375)'
E         'RN7SL691P (ENSG00000239464)'
E         'LINC00856 (ENSG00000230417)'
E         'MTND6P16 (ENSG00000249893)'
E         Extra items in the right set:
E         'LINC00595 (ENSG00000230417)'...
E         
E         ...Full output truncated (52450 lines hidden), use '-vv' to show

depmapomics/qc/test_compare_to_ref_release.py:56: AssertionError
---------------------------- Captured stderr setup -----------------------------
[                      ]N/A% |   0.0 s/B |   0.0 B /  88.1 MiB | ETA:  --:--:--
[                  ]  3% |  52.2 MiB/s |   3.0 MiB /  88.1 MiB | ETA:   0:00:01
[#                 ]  5% |  44.9 MiB/s |   5.0 MiB /  88.1 MiB | ETA:   0:00:01
[#                 ]  7% |  42.3 MiB/s |   7.0 MiB /  88.1 MiB | ETA:   0:00:01
[#                 ] 10% |  41.1 MiB/s |   9.0 MiB /  88.1 MiB | ETA:   0:00:01
[##                ] 12% |  40.4 MiB/s |  11.0 MiB /  88.1 MiB | ETA:   0:00:01
[##                ] 14% |  39.9 MiB/s |  13.0 MiB /  88.1 MiB | ETA:   0:00:01
[###               ] 17% |  39.5 MiB/s |  15.0 MiB /  88.1 MiB | ETA:   0:00:01
[###               ] 19% |  39.3 MiB/s |  17.0 MiB /  88.1 MiB | ETA:   0:00:01
[###               ] 21% |  39.0 MiB/s |  19.0 MiB /  88.1 MiB | ETA:   0:00:01
[####              ] 23% |  38.9 MiB/s |  21.0 MiB /  88.1 MiB | ETA:   0:00:01
[####              ] 26% |  38.7 MiB/s |  23.0 MiB /  88.1 MiB | ETA:   0:00:01
[#####             ] 28% |  38.2 MiB/s |  25.0 MiB /  88.1 MiB | ETA:   0:00:01
[#####             ] 30% |  38.1 MiB/s |  27.0 MiB /  88.1 MiB | ETA:   0:00:01
[#####             ] 32% |  38.0 MiB/s |  29.0 MiB /  88.1 MiB | ETA:   0:00:01
[######            ] 35% |  37.9 MiB/s |  31.0 MiB /  88.1 MiB | ETA:   0:00:01
[######            ] 37% |  37.9 MiB/s |  33.0 MiB /  88.1 MiB | ETA:   0:00:01
[#######           ] 39% |  37.8 MiB/s |  35.0 MiB /  88.1 MiB | ETA:   0:00:01
[#######           ] 42% |  37.8 MiB/s |  37.0 MiB /  88.1 MiB | ETA:   0:00:01
[########          ] 45% |  37.8 MiB/s |  40.0 MiB /  88.1 MiB | ETA:   0:00:01
[########          ] 47% |  37.7 MiB/s |  42.0 MiB /  88.1 MiB | ETA:   0:00:01
[########          ] 49% |  37.7 MiB/s |  44.0 MiB /  88.1 MiB | ETA:   0:00:01
[#########         ] 52% |  37.7 MiB/s |  46.0 MiB /  88.1 MiB | ETA:   0:00:01
[#########         ] 54% |  37.7 MiB/s |  48.0 MiB /  88.1 MiB | ETA:   0:00:01
[##########        ] 56% |  37.7 MiB/s |  50.0 MiB /  88.1 MiB | ETA:   0:00:01
[##########        ] 59% |  37.7 MiB/s |  52.0 MiB /  88.1 MiB | ETA:   0:00:00
[###########       ] 61% |  37.7 MiB/s |  54.0 MiB /  88.1 MiB | ETA:   0:00:00
[###########       ] 63% |  37.7 MiB/s |  56.0 MiB /  88.1 MiB | ETA:   0:00:00
[###########       ] 65% |  37.7 MiB/s |  58.0 MiB /  88.1 MiB | ETA:   0:00:00
[############      ] 68% |  37.7 MiB/s |  60.0 MiB /  88.1 MiB | ETA:   0:00:00
[############      ] 70% |  37.7 MiB/s |  62.0 MiB /  88.1 MiB | ETA:   0:00:00
[#############     ] 72% |  37.7 MiB/s |  64.0 MiB /  88.1 MiB | ETA:   0:00:00
[#############     ] 74% |  37.7 MiB/s |  66.0 MiB /  88.1 MiB | ETA:   0:00:00
[##############    ] 78% |  37.7 MiB/s |  69.0 MiB /  88.1 MiB | ETA:   0:00:00
[##############    ] 80% |  37.7 MiB/s |  71.0 MiB /  88.1 MiB | ETA:   0:00:00
[##############    ] 82% |  37.6 MiB/s |  73.0 MiB /  88.1 MiB | ETA:   0:00:00
[###############   ] 85% |  37.6 MiB/s |  75.0 MiB /  88.1 MiB | ETA:   0:00:00
[###############   ] 87% |  37.6 MiB/s |  77.0 MiB /  88.1 MiB | ETA:   0:00:00
[################  ] 89% |  37.6 MiB/s |  79.0 MiB /  88.1 MiB | ETA:   0:00:00
[################  ] 91% |  37.6 MiB/s |  81.0 MiB /  88.1 MiB | ETA:   0:00:00
[################  ] 94% |  37.6 MiB/s |  83.0 MiB /  88.1 MiB | ETA:   0:00:00
[################# ] 96% |  37.6 MiB/s |  85.0 MiB /  88.1 MiB | ETA:   0:00:00
[################# ] 98% |  37.6 MiB/s |  87.0 MiB /  88.1 MiB | ETA:   0:00:00
[##################]100% |  37.6 MiB/s |  88.1 MiB /  88.1 MiB | Time:  0:00:02
[                      ]N/A% |   0.0 s/B |   0.0 B /  93.2 MiB | ETA:  --:--:--
[                  ]  3% |  51.8 MiB/s |   3.0 MiB /  93.2 MiB | ETA:   0:00:01
[                  ]  5% |  43.9 MiB/s |   5.0 MiB /  93.2 MiB | ETA:   0:00:02
[#                 ]  8% |  41.1 MiB/s |   8.0 MiB /  93.2 MiB | ETA:   0:00:02
[#                 ] 10% |  40.1 MiB/s |  10.0 MiB /  93.2 MiB | ETA:   0:00:02
[##                ] 12% |  39.3 MiB/s |  12.0 MiB /  93.2 MiB | ETA:   0:00:02
[##                ] 16% |  38.8 MiB/s |  15.0 MiB /  93.2 MiB | ETA:   0:00:02
[###               ] 18% |  38.4 MiB/s |  17.0 MiB /  93.2 MiB | ETA:   0:00:01
[###               ] 20% |  38.3 MiB/s |  19.0 MiB /  93.2 MiB | ETA:   0:00:01
[####              ] 22% |  38.1 MiB/s |  21.0 MiB /  93.2 MiB | ETA:   0:00:01
[####              ] 24% |  38.0 MiB/s |  23.0 MiB /  93.2 MiB | ETA:   0:00:01
[####              ] 26% |  37.9 MiB/s |  25.0 MiB /  93.2 MiB | ETA:   0:00:01
[#####             ] 30% |  37.8 MiB/s |  28.0 MiB /  93.2 MiB | ETA:   0:00:01
[#####             ] 32% |  37.8 MiB/s |  30.0 MiB /  93.2 MiB | ETA:   0:00:01
[######            ] 34% |  37.8 MiB/s |  32.0 MiB /  93.2 MiB | ETA:   0:00:01
[######            ] 36% |  37.7 MiB/s |  34.0 MiB /  93.2 MiB | ETA:   0:00:01
[######            ] 38% |  37.7 MiB/s |  36.0 MiB /  93.2 MiB | ETA:   0:00:01
[#######           ] 40% |  37.6 MiB/s |  38.0 MiB /  93.2 MiB | ETA:   0:00:01
[#######           ] 42% |  32.2 MiB/s |  40.0 MiB /  93.2 MiB | ETA:   0:00:01
[########          ] 45% |  32.4 MiB/s |  42.0 MiB /  93.2 MiB | ETA:   0:00:01
[########          ] 47% |  32.6 MiB/s |  44.0 MiB /  93.2 MiB | ETA:   0:00:01
[#########         ] 50% |  31.9 MiB/s |  47.0 MiB /  93.2 MiB | ETA:   0:00:01
[#########         ] 51% |  30.9 MiB/s |  48.0 MiB /  93.2 MiB | ETA:   0:00:01
[#########         ] 53% |  31.1 MiB/s |  50.0 MiB /  93.2 MiB | ETA:   0:00:01
[##########        ] 55% |  31.3 MiB/s |  52.0 MiB /  93.2 MiB | ETA:   0:00:01
[##########        ] 57% |  31.5 MiB/s |  54.0 MiB /  93.2 MiB | ETA:   0:00:01
[##########        ] 59% |  30.2 MiB/s |  55.0 MiB /  93.2 MiB | ETA:   0:00:01
[##########        ] 60% |  28.6 MiB/s |  56.0 MiB /  93.2 MiB | ETA:   0:00:01
[###########       ] 62% |  28.9 MiB/s |  58.0 MiB /  93.2 MiB | ETA:   0:00:01
[###########       ] 65% |  29.2 MiB/s |  61.0 MiB /  93.2 MiB | ETA:   0:00:01
[############      ] 67% |  29.4 MiB/s |  63.0 MiB /  93.2 MiB | ETA:   0:00:01
[############      ] 69% |  29.6 MiB/s |  65.0 MiB /  93.2 MiB | ETA:   0:00:00
[############      ] 71% |  29.8 MiB/s |  67.0 MiB /  93.2 MiB | ETA:   0:00:00
[#############     ] 74% |  30.0 MiB/s |  69.0 MiB /  93.2 MiB | ETA:   0:00:00
[#############     ] 76% |  30.1 MiB/s |  71.0 MiB /  93.2 MiB | ETA:   0:00:00
[##############    ] 79% |  30.4 MiB/s |  74.0 MiB /  93.2 MiB | ETA:   0:00:00
[##############    ] 81% |  30.5 MiB/s |  76.0 MiB /  93.2 MiB | ETA:   0:00:00
[###############   ] 83% |  30.7 MiB/s |  78.0 MiB /  93.2 MiB | ETA:   0:00:00
[###############   ] 85% |  30.8 MiB/s |  80.0 MiB /  93.2 MiB | ETA:   0:00:00
[###############   ] 87% |  31.0 MiB/s |  82.0 MiB /  93.2 MiB | ETA:   0:00:00
[################  ] 90% |  31.1 MiB/s |  84.0 MiB /  93.2 MiB | ETA:   0:00:00
[################  ] 93% |  31.3 MiB/s |  87.0 MiB /  93.2 MiB | ETA:   0:00:00
[################# ] 95% |  31.4 MiB/s |  89.0 MiB /  93.2 MiB | ETA:   0:00:00
[################# ] 97% |  31.5 MiB/s |  91.0 MiB /  93.2 MiB | ETA:   0:00:00
[################# ] 99% |  31.7 MiB/s |  93.0 MiB /  93.2 MiB | ETA:   0:00:00
[##################]100% |  31.6 MiB/s |  93.2 MiB /  93.2 MiB | Time:  0:00:02
_____ test_matrix_correlations[CCLE_expression-0.99999-persample-spearman] _____

data = (            TSPAN6 (7105)  ...  AC113348.1 (102724657)
ACH-001113       4.990501  ...                0.000000
ACH-001...05292  ...                0.000000
ACH-000052       4.870858  ...                0.000000

[1511 rows x 19177 columns])
threshold = 0.99999, axisname = 'persample', method = 'spearman'

    @pytest.mark.parametrize('method', ['spearman',
                             pytest.param('pearson',
                             marks=pytest.mark.skip(reason='Pearson can be sensitive to outliers'))])
    @pytest.mark.parametrize('axisname', ['persample',
                            pytest.param('pergene',
                            marks=pytest.mark.skip(reason='If persample fails usually this fails too'))])
    @pytest.mark.parametrize('data, threshold', PARAMS_matrix_correlations, indirect=['data'])
    @pytest.mark.compare
    def test_matrix_correlations(data, threshold, axisname, method):
        axis = 0 if axisname == 'pergene' else 1 if axisname == 'persample' else None
        data1, data2 = data
        corrs = data1.corrwith(data2, axis=axis, drop=True, method=method)
        # TODO: tests for NAs instead of dropping them. It seems like NA can happen if there are all zeros in one of the vectors, so let's dropna for now
        corrs.dropna(inplace=True)
>       assert (corrs >= threshold).all(), 'the cases which did not pass the tests are:\n{}'.format(corrs[corrs<threshold].sort_values())
E       AssertionError: the cases which did not pass the tests are:
E         ACH-001163    0.862828
E         ACH-001196    0.913189
E         ACH-001096    0.913189
E         dtype: float64
E       assert False
E        +  where False = <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool>()
E        +    where <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool> = ACH-001113    1.0\nACH-001289    1.0\nACH-001339    1.0\nACH-001538    1.0\nACH-000242    1.0\n             ... \nACH-000750    1.0\nACH-000285    1.0\nACH-001858    1.0\nACH-001997    1.0\nACH-000052    1.0\nLength: 1410, dtype: float64 >= 0.99999.all

depmapomics/qc/test_compare_to_ref_release.py:76: AssertionError
_ test_matrix_correlations[CCLE_expression_proteincoding_genes_expected_count-0.99999-persample-spearman] _

data = (            TSPAN6 (7105)  ...  AC113348.1 (102724657)
ACH-001113         2383.0  ...                     0.0
ACH-001...694.0  ...                     0.0
ACH-000052         3188.0  ...                     0.0

[1511 rows x 19177 columns])
threshold = 0.99999, axisname = 'persample', method = 'spearman'

    @pytest.mark.parametrize('method', ['spearman',
                             pytest.param('pearson',
                             marks=pytest.mark.skip(reason='Pearson can be sensitive to outliers'))])
    @pytest.mark.parametrize('axisname', ['persample',
                            pytest.param('pergene',
                            marks=pytest.mark.skip(reason='If persample fails usually this fails too'))])
    @pytest.mark.parametrize('data, threshold', PARAMS_matrix_correlations, indirect=['data'])
    @pytest.mark.compare
    def test_matrix_correlations(data, threshold, axisname, method):
        axis = 0 if axisname == 'pergene' else 1 if axisname == 'persample' else None
        data1, data2 = data
        corrs = data1.corrwith(data2, axis=axis, drop=True, method=method)
        # TODO: tests for NAs instead of dropping them. It seems like NA can happen if there are all zeros in one of the vectors, so let's dropna for now
        corrs.dropna(inplace=True)
>       assert (corrs >= threshold).all(), 'the cases which did not pass the tests are:\n{}'.format(corrs[corrs<threshold].sort_values())
E       AssertionError: the cases which did not pass the tests are:
E         ACH-001163    0.864193
E         ACH-001196    0.913645
E         ACH-001096    0.913645
E         dtype: float64
E       assert False
E        +  where False = <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool>()
E        +    where <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool> = ACH-001113    1.0\nACH-001289    1.0\nACH-001339    1.0\nACH-001538    1.0\nACH-000242    1.0\n             ... \nACH-000750    1.0\nACH-000285    1.0\nACH-001858    1.0\nACH-001997    1.0\nACH-000052    1.0\nLength: 1410, dtype: float64 >= 0.99999.all

depmapomics/qc/test_compare_to_ref_release.py:76: AssertionError
_ test_matrix_correlations[CCLE_RNAseq_transcripts-0.99999-persample-spearman] _

data = (            TSPAN6 (ENST00000373020)  ...  ERCC-00171
ACH-001113                  4.895787  ...    7.053872
ACH-00128...         5.751142  ...    8.399043
ACH-000052                  4.730640  ...    0.000000

[1511 rows x 198840 columns])
threshold = 0.99999, axisname = 'persample', method = 'spearman'

    @pytest.mark.parametrize('method', ['spearman',
                             pytest.param('pearson',
                             marks=pytest.mark.skip(reason='Pearson can be sensitive to outliers'))])
    @pytest.mark.parametrize('axisname', ['persample',
                            pytest.param('pergene',
                            marks=pytest.mark.skip(reason='If persample fails usually this fails too'))])
    @pytest.mark.parametrize('data, threshold', PARAMS_matrix_correlations, indirect=['data'])
    @pytest.mark.compare
    def test_matrix_correlations(data, threshold, axisname, method):
        axis = 0 if axisname == 'pergene' else 1 if axisname == 'persample' else None
        data1, data2 = data
        corrs = data1.corrwith(data2, axis=axis, drop=True, method=method)
        # TODO: tests for NAs instead of dropping them. It seems like NA can happen if there are all zeros in one of the vectors, so let's dropna for now
        corrs.dropna(inplace=True)
>       assert (corrs >= threshold).all(), 'the cases which did not pass the tests are:\n{}'.format(corrs[corrs<threshold].sort_values())
E       AssertionError: the cases which did not pass the tests are:
E         ACH-001163    0.717008
E         ACH-001196    0.751678
E         ACH-001096    0.751678
E         dtype: float64
E       assert False
E        +  where False = <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool>()
E        +    where <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool> = ACH-001113    1.0\nACH-001289    1.0\nACH-001339    1.0\nACH-001538    1.0\nACH-000242    1.0\n             ... \nACH-000750    1.0\nACH-000285    1.0\nACH-001858    1.0\nACH-001997    1.0\nACH-000052    1.0\nLength: 1410, dtype: float64 >= 0.99999.all

depmapomics/qc/test_compare_to_ref_release.py:76: AssertionError
_ test_matrix_correlations[CCLE_expression_transcripts_expected_count-0.99999-persample-spearman] _

data = (            TSPAN6 (ENST00000373020)  ...  ERCC-00171
ACH-001113                    2272.9  ...      1059.0
ACH-00128...          40350.0  ...     27312.0
ACH-000052                    2956.3  ...         0.0

[1511 rows x 199272 columns])
threshold = 0.99999, axisname = 'persample', method = 'spearman'

    @pytest.mark.parametrize('method', ['spearman',
                             pytest.param('pearson',
                             marks=pytest.mark.skip(reason='Pearson can be sensitive to outliers'))])
    @pytest.mark.parametrize('axisname', ['persample',
                            pytest.param('pergene',
                            marks=pytest.mark.skip(reason='If persample fails usually this fails too'))])
    @pytest.mark.parametrize('data, threshold', PARAMS_matrix_correlations, indirect=['data'])
    @pytest.mark.compare
    def test_matrix_correlations(data, threshold, axisname, method):
        axis = 0 if axisname == 'pergene' else 1 if axisname == 'persample' else None
        data1, data2 = data
        corrs = data1.corrwith(data2, axis=axis, drop=True, method=method)
        # TODO: tests for NAs instead of dropping them. It seems like NA can happen if there are all zeros in one of the vectors, so let's dropna for now
        corrs.dropna(inplace=True)
>       assert (corrs >= threshold).all(), 'the cases which did not pass the tests are:\n{}'.format(corrs[corrs<threshold].sort_values())
E       AssertionError: the cases which did not pass the tests are:
E         ACH-001163    0.735616
E         ACH-001196    0.769013
E         ACH-001096    0.769013
E         dtype: float64
E       assert False
E        +  where False = <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool>()
E        +    where <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool> = ACH-001113    1.0\nACH-001289    1.0\nACH-001339    1.0\nACH-001538    1.0\nACH-000242    1.0\n             ... \nACH-000750    1.0\nACH-000285    1.0\nACH-001858    1.0\nACH-001997    1.0\nACH-000052    1.0\nLength: 1410, dtype: float64 >= 0.99999.all

depmapomics/qc/test_compare_to_ref_release.py:76: AssertionError
__ test_matrix_correlations[CCLE_expression_full-0.99999-persample-spearman] ___

data = (            TSPAN6 (ENSG00000000003)  ...  ERCC-00171
ACH-001113                  4.990501  ...    7.053872
ACH-00128...          5.805292  ...    8.399043
ACH-000052                  4.870858  ...    0.000000

[1511 rows x 52054 columns])
threshold = 0.99999, axisname = 'persample', method = 'spearman'

    @pytest.mark.parametrize('method', ['spearman',
                             pytest.param('pearson',
                             marks=pytest.mark.skip(reason='Pearson can be sensitive to outliers'))])
    @pytest.mark.parametrize('axisname', ['persample',
                            pytest.param('pergene',
                            marks=pytest.mark.skip(reason='If persample fails usually this fails too'))])
    @pytest.mark.parametrize('data, threshold', PARAMS_matrix_correlations, indirect=['data'])
    @pytest.mark.compare
    def test_matrix_correlations(data, threshold, axisname, method):
        axis = 0 if axisname == 'pergene' else 1 if axisname == 'persample' else None
        data1, data2 = data
        corrs = data1.corrwith(data2, axis=axis, drop=True, method=method)
        # TODO: tests for NAs instead of dropping them. It seems like NA can happen if there are all zeros in one of the vectors, so let's dropna for now
        corrs.dropna(inplace=True)
>       assert (corrs >= threshold).all(), 'the cases which did not pass the tests are:\n{}'.format(corrs[corrs<threshold].sort_values())
E       AssertionError: the cases which did not pass the tests are:
E         ACH-001163    0.833263
E         ACH-001196    0.859933
E         ACH-001096    0.859933
E         dtype: float64
E       assert False
E        +  where False = <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool>()
E        +    where <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool> = ACH-001113    1.0\nACH-001289    1.0\nACH-001339    1.0\nACH-001538    1.0\nACH-000242    1.0\n             ... \nACH-000750    1.0\nACH-000285    1.0\nACH-001858    1.0\nACH-001997    1.0\nACH-000052    1.0\nLength: 1410, dtype: float64 >= 0.99999.all

depmapomics/qc/test_compare_to_ref_release.py:76: AssertionError
____ test_matrix_correlations[CCLE_RNAseq_reads-0.99999-persample-spearman] ____

data = (            TSPAN6 (ENSG00000000003)  ...  ERCC-00171
ACH-001113                    2383.0  ...      1059.0
ACH-00128...           41694.0  ...     27312.0
ACH-000052                    3188.0  ...         0.0

[1511 rows x 52439 columns])
threshold = 0.99999, axisname = 'persample', method = 'spearman'

    @pytest.mark.parametrize('method', ['spearman',
                             pytest.param('pearson',
                             marks=pytest.mark.skip(reason='Pearson can be sensitive to outliers'))])
    @pytest.mark.parametrize('axisname', ['persample',
                            pytest.param('pergene',
                            marks=pytest.mark.skip(reason='If persample fails usually this fails too'))])
    @pytest.mark.parametrize('data, threshold', PARAMS_matrix_correlations, indirect=['data'])
    @pytest.mark.compare
    def test_matrix_correlations(data, threshold, axisname, method):
        axis = 0 if axisname == 'pergene' else 1 if axisname == 'persample' else None
        data1, data2 = data
        corrs = data1.corrwith(data2, axis=axis, drop=True, method=method)
        # TODO: tests for NAs instead of dropping them. It seems like NA can happen if there are all zeros in one of the vectors, so let's dropna for now
        corrs.dropna(inplace=True)
>       assert (corrs >= threshold).all(), 'the cases which did not pass the tests are:\n{}'.format(corrs[corrs<threshold].sort_values())
E       AssertionError: the cases which did not pass the tests are:
E         ACH-001163    0.848882
E         ACH-001096    0.873526
E         ACH-001196    0.873526
E         dtype: float64
E       assert False
E        +  where False = <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool>()
E        +    where <bound method NDFrame._add_numeric_operations.<locals>.all of ACH-001113    True\nACH-001289    True\nACH-001339    True...H-000750    True\nACH-000285    True\nACH-001858    True\nACH-001997    True\nACH-000052    True\nLength: 1410, dtype: bool> = ACH-001113    1.0\nACH-001289    1.0\nACH-001339    1.0\nACH-001538    1.0\nACH-000242    1.0\n             ... \nACH-000750    1.0\nACH-000285    1.0\nACH-001858    1.0\nACH-001997    1.0\nACH-000052    1.0\nLength: 1410, dtype: float64 >= 0.99999.all

depmapomics/qc/test_compare_to_ref_release.py:76: AssertionError
_______ test_fraction_of_unequal_columns_from_merged_file[CCLE_fusions] ________

dataframes_merged =         DepMap_ID  ...      _merge
0      ACH-001113  ...        both
1      ACH-001113  ...        both
2      ACH-00...02669  ...  right_only
46623  ACH-002669  ...  right_only
46624  ACH-002669  ...  right_only

[46625 rows x 28 columns]
expected_changed_cols = ['CCLE_count']

    @pytest.mark.parametrize('dataframes_merged, expected_changed_cols', PARAMS_fraction_of_unequl_columns_from_merged_file,
                             indirect=['dataframes_merged'], ids=[x[0][0] for x in PARAMS_fraction_of_unequl_columns_from_merged_file])
    @pytest.mark.compare
    def test_fraction_of_unequal_columns_from_merged_file(dataframes_merged, expected_changed_cols):
        dataframes_merged.drop([x+'_x' for x in expected_changed_cols], inplace=True, axis=1)
        dataframes_merged.drop([x+'_y' for x in expected_changed_cols], inplace=True, axis=1)
        cols = list(set([x[:-2] for x in dataframes_merged.columns if x.endswith('_x') | x.endswith('_y')]))
        dataframe_merge_both = dataframes_merged[dataframes_merged['_merge'] == 'both']
        dataframe_merge_both.set_index('DepMap_ID', inplace=True)
        unequal_values = pd.DataFrame(index=dataframe_merge_both.index, columns=cols)
        cols_dtype = dataframe_merge_both[[col+'_x' for col in cols]].dtypes
        equal_nonNA = lambda a, b: (a == b) | ((a != a) & (b != b)) # this is a regular equality tests with the exception that NA==NA
        almost_equal_nonNA = lambda a, b: np.isclose(a, b) | ((a != a) & (b != b)) # this is a regular equality tests with the exception that NA==NA
        for col in cols:
            if cols_dtype[col+'_x'] == np.dtype('float64'): # otherwise very close values will look different
                unequal_values[col] = ~almost_equal_nonNA(dataframe_merge_both[col+'_x'], dataframe_merge_both[col+'_y'])
            else:
                unequal_values[col] = ~equal_nonNA(dataframe_merge_both[col+'_x'], dataframe_merge_both[col+'_y'])
    
        unequal_columns = unequal_values.agg(['mean', 'sum']).T
        unequal_columns.sort_values('mean', ascending=False, inplace=True)
        unequal_columns['sum'] = unequal_columns['sum'].astype(int)
        unequal_columns = unequal_columns[unequal_columns['sum'] > 0]
        unequal_columns.rename(columns={'mean': 'freq', 'sum': 'count'}, inplace=True)
    
        unequal_values_sum = unequal_values.groupby('DepMap_ID').sum()
        unequal_values_sum = unequal_values_sum[(unequal_values_sum > 0).any(axis=1)]
        unequal_values_sum = unequal_values_sum.loc[:, (unequal_values_sum > 0).all()]
    
>       assert unequal_columns.empty, 'fraction of unequal values in each column that are expected to be equal:\n{}\
            \n\ncell lines affected by these changes:\n{}'.format(unequal_columns, unequal_values_sum)
E       AssertionError: fraction of unequal values in each column that are expected to be equal:
E                                 freq  count
E         FFPM                0.001024     45
E         JunctionReadCount   0.001001     44
E         SpanningFragCount   0.000955     42
E         LargeAnchorSupport  0.000023      1        
E         
E         cell lines affected by these changes:
E                     JunctionReadCount  SpanningFragCount  FFPM
E         DepMap_ID                                             
E         ACH-000833                  9                  9     9
E         ACH-001163                  2                  2     2
E         ACH-001164                 33                 31    34
E       assert False
E        +  where False =                         freq  count\nFFPM                0.001024     45\nJunctionReadCount   0.001001     44\nSpanningFragCount   0.000955     42\nLargeAnchorSupport  0.000023      1.empty

depmapomics/qc/test_compare_to_ref_release.py:110: AssertionError
__ test_fraction_of_unequal_columns_from_merged_file[CCLE_fusions_unfiltered] __

dataframes_merged =          DepMap_ID  ...      _merge
0       ACH-001113  ...        both
1       ACH-001113  ...        both
2       AC...69  ...  right_only
368208  ACH-002669  ...  right_only
368209  ACH-002669  ...  right_only

[368210 rows x 28 columns]
expected_changed_cols = ['CCLE_count']

    @pytest.mark.parametrize('dataframes_merged, expected_changed_cols', PARAMS_fraction_of_unequl_columns_from_merged_file,
                             indirect=['dataframes_merged'], ids=[x[0][0] for x in PARAMS_fraction_of_unequl_columns_from_merged_file])
    @pytest.mark.compare
    def test_fraction_of_unequal_columns_from_merged_file(dataframes_merged, expected_changed_cols):
        dataframes_merged.drop([x+'_x' for x in expected_changed_cols], inplace=True, axis=1)
        dataframes_merged.drop([x+'_y' for x in expected_changed_cols], inplace=True, axis=1)
        cols = list(set([x[:-2] for x in dataframes_merged.columns if x.endswith('_x') | x.endswith('_y')]))
        dataframe_merge_both = dataframes_merged[dataframes_merged['_merge'] == 'both']
        dataframe_merge_both.set_index('DepMap_ID', inplace=True)
        unequal_values = pd.DataFrame(index=dataframe_merge_both.index, columns=cols)
        cols_dtype = dataframe_merge_both[[col+'_x' for col in cols]].dtypes
        equal_nonNA = lambda a, b: (a == b) | ((a != a) & (b != b)) # this is a regular equality tests with the exception that NA==NA
        almost_equal_nonNA = lambda a, b: np.isclose(a, b) | ((a != a) & (b != b)) # this is a regular equality tests with the exception that NA==NA
        for col in cols:
            if cols_dtype[col+'_x'] == np.dtype('float64'): # otherwise very close values will look different
                unequal_values[col] = ~almost_equal_nonNA(dataframe_merge_both[col+'_x'], dataframe_merge_both[col+'_y'])
            else:
                unequal_values[col] = ~equal_nonNA(dataframe_merge_both[col+'_x'], dataframe_merge_both[col+'_y'])
    
        unequal_columns = unequal_values.agg(['mean', 'sum']).T
        unequal_columns.sort_values('mean', ascending=False, inplace=True)
        unequal_columns['sum'] = unequal_columns['sum'].astype(int)
        unequal_columns = unequal_columns[unequal_columns['sum'] > 0]
        unequal_columns.rename(columns={'mean': 'freq', 'sum': 'count'}, inplace=True)
    
        unequal_values_sum = unequal_values.groupby('DepMap_ID').sum()
        unequal_values_sum = unequal_values_sum[(unequal_values_sum > 0).any(axis=1)]
        unequal_values_sum = unequal_values_sum.loc[:, (unequal_values_sum > 0).all()]
    
>       assert unequal_columns.empty, 'fraction of unequal values in each column that are expected to be equal:\n{}\
            \n\ncell lines affected by these changes:\n{}'.format(unequal_columns, unequal_values_sum)
E       AssertionError: fraction of unequal values in each column that are expected to be equal:
E                                 freq  count
E         FFPM                0.000331    118
E         JunctionReadCount   0.000298    106
E         SpanningFragCount   0.000267     95
E         LargeAnchorSupport  0.000020      7
E         SpliceType          0.000006      2        
E         
E         cell lines affected by these changes:
E                     JunctionReadCount  SpanningFragCount  FFPM
E         DepMap_ID                                             
E         ACH-000756                  2                  2     2
E         ACH-000833                 19                 18    22
E         ACH-001096                 16                 14    19
E         ACH-001163                  4                  3     4
E         ACH-001164                 49                 44    52
E         ACH-001196                 16                 14    19
E       assert False
E        +  where False =                         freq  count\nFFPM                0.000331    118\nJunctionReadCount   0.000298    106\nSpanningFragCount   0.000267     95\nLargeAnchorSupport  0.000020      7\nSpliceType          0.000006      2.empty

depmapomics/qc/test_compare_to_ref_release.py:110: AssertionError
=============================== warnings summary ===============================
../../miniconda3/lib/python3.8/site-packages/ipykernel/zmqshell.py:57
  /home/jnoorbak/miniconda3/lib/python3.8/site-packages/ipykernel/zmqshell.py:57: DeprecationWarning: ipykernel.datapub is deprecated. It has moved to ipyparallel.datapub
    from ipykernel.datapub import ZMQDataPublisher

../../miniconda3/lib/python3.8/site-packages/ipykernel/datapub.py:21
  /home/jnoorbak/miniconda3/lib/python3.8/site-packages/ipykernel/datapub.py:21: DeprecationWarning: ipykernel.serialize is deprecated. It has moved to ipyparallel.serialize
    from ipykernel.serialize import serialize_object

../../miniconda3/lib/python3.8/site-packages/ipykernel/serialize.py:25
  /home/jnoorbak/miniconda3/lib/python3.8/site-packages/ipykernel/serialize.py:25: DeprecationWarning: ipykernel.pickleutil is deprecated. It has moved to ipyparallel.
    from ipykernel.pickleutil import (

../../miniconda3/lib/python3.8/site-packages/ipykernel/pickleutil.py:26
  /home/jnoorbak/miniconda3/lib/python3.8/site-packages/ipykernel/pickleutil.py:26: DeprecationWarning: ipykernel.codeutil is deprecated since IPykernel 4.3.1. It has moved to ipyparallel.serialize
    from ipykernel import codeutil

depmapomics/qc/test_compare_to_ref_release.py:53
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_compare_to_ref_release.py:53: PytestUnknownMarkWarning: Unknown pytest.mark.compare - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.compare

depmapomics/qc/test_compare_to_ref_release.py:69
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_compare_to_ref_release.py:69: PytestUnknownMarkWarning: Unknown pytest.mark.compare - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.compare

depmapomics/qc/test_compare_to_ref_release.py:83
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_compare_to_ref_release.py:83: PytestUnknownMarkWarning: Unknown pytest.mark.compare - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.compare

depmapomics/qc/test_compare_to_ref_release.py:117
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_compare_to_ref_release.py:117: PytestUnknownMarkWarning: Unknown pytest.mark.compare - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.compare

depmapomics/qc/test_compare_to_ref_release.py:137
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_compare_to_ref_release.py:137: PytestUnknownMarkWarning: Unknown pytest.mark.compare - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.compare

depmapomics/qc/test_compare_to_ref_release.py:157
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_compare_to_ref_release.py:157: PytestUnknownMarkWarning: Unknown pytest.mark.compare - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.compare

depmapomics/qc/test_compare_to_ref_release.py:173
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_compare_to_ref_release.py:173: PytestUnknownMarkWarning: Unknown pytest.mark.compare - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.compare

depmapomics/qc/test_file_format.py:17
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_file_format.py:17: PytestUnknownMarkWarning: Unknown pytest.mark.format - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.format

depmapomics/qc/test_file_format.py:25
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_file_format.py:25: PytestUnknownMarkWarning: Unknown pytest.mark.format - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.format

depmapomics/qc/test_file_format.py:34
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_file_format.py:34: PytestUnknownMarkWarning: Unknown pytest.mark.format - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.format

depmapomics/qc/test_file_format.py:50
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_file_format.py:50: PytestUnknownMarkWarning: Unknown pytest.mark.format - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.format

depmapomics/qc/test_file_format.py:66
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_file_format.py:66: PytestUnknownMarkWarning: Unknown pytest.mark.format - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.format

depmapomics/qc/test_file_format.py:77
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_file_format.py:77: PytestUnknownMarkWarning: Unknown pytest.mark.format - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.format

depmapomics/qc/test_file_format.py:84
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_file_format.py:84: PytestUnknownMarkWarning: Unknown pytest.mark.format - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.format

depmapomics/qc/test_file_format.py:92
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_file_format.py:92: PytestUnknownMarkWarning: Unknown pytest.mark.format - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.format

depmapomics/qc/test_file_format.py:99
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_file_format.py:99: PytestUnknownMarkWarning: Unknown pytest.mark.format - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.format

depmapomics/qc/test_file_format.py:105
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_file_format.py:105: PytestUnknownMarkWarning: Unknown pytest.mark.format - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.format

depmapomics/qc/test_plot_comparisons.py:67
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_plot_comparisons.py:67: PytestUnknownMarkWarning: Unknown pytest.mark.plot - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.plot

depmapomics/qc/test_plot_comparisons.py:87
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_plot_comparisons.py:87: PytestUnknownMarkWarning: Unknown pytest.mark.plot - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.plot

depmapomics/qc/test_plot_comparisons.py:123
  /home/jnoorbak/projects/depmap_omics/depmapomics/qc/test_plot_comparisons.py:123: PytestUnknownMarkWarning: Unknown pytest.mark.plot - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.plot

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_expression]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_expression_proteincoding_genes_expected_count]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_RNAseq_transcripts]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_expression_transcripts_expected_count]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_expression_full]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_compare_column_names[CCLE_RNAseq_reads]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression-0.99999-persample-spearman]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_proteincoding_genes_expected_count-0.99999-persample-spearman]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_RNAseq_transcripts-0.99999-persample-spearman]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_transcripts_expected_count-0.99999-persample-spearman]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_expression_full-0.99999-persample-spearman]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_matrix_correlations[CCLE_RNAseq_reads-0.99999-persample-spearman]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_fraction_of_unequal_columns_from_merged_file[CCLE_fusions]
FAILED depmapomics/qc/test_compare_to_ref_release.py::test_fraction_of_unequal_columns_from_merged_file[CCLE_fusions_unfiltered]
===== 14 failed, 65 passed, 29 skipped, 24 warnings in 3271.75s (0:54:31) ======
